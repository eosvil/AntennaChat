<Window xmlns:Talk="clr-namespace:AntennaChat.Views.Talk"  x:Class="AntennaChat.Views.MainWindowView"
         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=Microsoft.Windows.Shell"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:Resource="clr-namespace:AntennaChat.Resource" 
        xmlns:ContactsViewModel="clr-namespace:AntennaChat.ViewModel.Contacts"
        xmlns:TalkViewModel="clr-namespace:AntennaChat.ViewModel.Talk"
        xmlns:ContactsView="clr-namespace:AntennaChat.Views.Contacts"
        xmlns:TalkView="clr-namespace:AntennaChat.Views.Talk"
        xmlns:notifyIcon="clr-namespace:NotifyIconWpf;assembly=NotifyIconWpf"
        mc:Ignorable="d"
        Title="七讯" Height="640" Width="990" MinHeight="620" MinWidth="990" WindowStyle="None"
        Loaded="MainWindowView_OnLoaded"
        WindowStartupLocation="CenterScreen" Name="mainWindow" Tag="{Binding UserId}" Icon="/AntennaChat;component/七讯.ico" AllowDrop="True">
    <shell:WindowChrome.WindowChrome>
        <shell:WindowChrome GlassFrameThickness="-1" ResizeBorderThickness="4"
                        CaptionHeight="4" CornerRadius="0"/>
    </shell:WindowChrome.WindowChrome>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding LoadedCommand}" CommandParameter="{Binding ElementName=mainWindow}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="MouseLeftButtonDown">
            <i:InvokeCommandAction Command="{Binding MoveWindow}" CommandParameter="{Binding ElementName=mainWindow}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Closing">
            <ei:CallMethodAction TargetObject="{Binding}" MethodName="Window_Closing"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="StateChanged">
            <i:InvokeCommandAction Command="{Binding WindowStateChanged}" CommandParameter="{Binding ElementName=mainWindow}"/>
        </i:EventTrigger>
        <!--<i:EventTrigger EventName="Drop">
            <ei:CallMethodAction TargetObject="{Binding}" MethodName="Window_Drop"/>
        </i:EventTrigger>-->
        <!--<i:EventTrigger EventName="MouseDoubleClick">
            <i:InvokeCommandAction Command="{Binding MaxWindow}" CommandParameter="{Binding ElementName=mainWindow}"/>
        </i:EventTrigger>-->
    </i:Interaction.Triggers>
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="boolToVisibilityConverter"/>
        <Resource:ToVisibilityConverter x:Key="toVisibilityConverter"></Resource:ToVisibilityConverter>
        <DataTemplate DataType="{x:Type ContactsViewModel:SessionListViewModel}">
            <ContactsView:SessionListView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type ContactsViewModel:GroupListViewModel}">
            <ContactsView:GroupListView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type ContactsViewModel:ContactInfoViewModel}">
            <ContactsView:ContactInfoView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type ContactsViewModel:ContactListViewModel}">
            <ContactsView:ContactListView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type TalkViewModel:TalkViewModel}">
            <TalkView:TalkWindowView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type TalkViewModel:TalkGroupViewModel}">
            <TalkView:TalkGroupWindowView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type ContactsViewModel:QueryContactListViewModel}">
            <ContactsView:QueryContactListView/>
        </DataTemplate>
        <Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>
        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border SnapsToDevicePixels="true"  BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" >
                            <Grid HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" Fill="White" HorizontalAlignment="Center" Margin="3,1,0,0" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="OnlineStateComboBoxStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
            <Setter Property="Padding" Value="4,3"/>
            <Setter Property="Width" Value="40"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <!--<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid x:Name="MainGrid" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1,5,1,1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                <Border x:Name="DropDownBorder" BorderBrush="#FFCCCCCC" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" Margin="3">
                                    <Border.Effect>
                                        <DropShadowEffect Color="#FFE4E2E2"  BlurRadius="10" ShadowDepth="0" Opacity="1" />
                                    </Border.Effect>
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                            <StackPanel Orientation="Horizontal"   Background="Transparent" VerticalAlignment="Center" Margin="10,0,0,0">
                                <Image x:Name="imageState" Source="{Binding UserSelectedState.StateImage}" Stretch="None" ></Image>
                                <Ellipse  x:Name="stateEllipse" Fill="Transparent" Width="11" Height="11"/>
                            </StackPanel>
                            <ToggleButton BorderBrush="{TemplateBinding BorderBrush}" Content="{TemplateBinding SelectedValue}" Background="{TemplateBinding Background}"
                                          Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{DynamicResource ComboBoxToggleButton}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!--<DataTrigger Binding="{Binding UserSelectedState.OnlineState}" Value="1">
                                <Setter TargetName="stateEllipse" Property="Fill" Value="#FF00FF37"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding UserSelectedState.OnlineState}" Value="2">
                                <Setter TargetName="stateEllipse" Property="Fill" Value="#FFFF6D00"/>
                            </DataTrigger>-->
                            <DataTrigger Binding="{Binding UserSelectedState.OnlineState}" Value="0">
                                <Setter TargetName="stateEllipse" Property="Fill" Value="#FFB2B2B2"/>
                                <Setter TargetName="imageState" Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                <Setter Property="Background" Value="#FFF4F4F4"/>
                            </Trigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="true"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>
      <Style x:Key="NotifyMenuItem" TargetType="{x:Type MenuItem}">
          <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate  TargetType="{x:Type MenuItem}">
                        <Grid SnapsToDevicePixels="True">
                            <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
                            <Rectangle x:Name="InnerBorder" Margin="1" RadiusY="2" RadiusX="2"/>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                    <ColumnDefinition Width="4"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="22"/>
                                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                    <ColumnDefinition Width="17"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <Border x:Name="GlyphPanel" BorderBrush="#FFCDD3E6" BorderThickness="1" Background="#FFE6EFF4" CornerRadius="3" Height="22" Margin="1" Visibility="Hidden" Width="22">
                                    <Path x:Name="Glyph" Data="M0,5.1L1.7,5.2 3.4,7.1 8,0.4 9.2,0 3.3,10.8z" Fill="#FF0C12A1" FlowDirection="LeftToRight" Height="11" Width="9"/>
                                </Border>
                                <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}"/>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="True">
                                <Setter Property="Fill" TargetName="Bg">
                                    <Setter.Value>
                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                            <GradientStop Color="#34C5EBFF" Offset="0"/>
                                            <GradientStop Color="#3481D8FF" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Stroke" TargetName="Bg" Value="#8071CBF1"/>
                                <Setter Property="Stroke" TargetName="InnerBorder" Value="#40FFFFFF"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#FF9A9A9A"/>
                                <Setter Property="Background" TargetName="GlyphPanel" Value="#FFEEE9E9"/>
                                <Setter Property="BorderBrush" TargetName="GlyphPanel" Value="#FFDBD6D6"/>
                                <Setter Property="Fill" TargetName="Glyph" Value="#FF848589"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
      </Style>
       
    </Window.Resources>
    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <notifyIcon:TaskbarIcon   x:Name="taskbarIcon" IconSource="{Binding IconUrl}"
                                DoubleClickCommand="{Binding Path=CommandOpenMainWindow}">
            <notifyIcon:TaskbarIcon.TrayToolTip>
                <Border Background="#FFF1F1F0"  CornerRadius="2">
                    <TextBlock Margin="10,4" Text="{Binding NotifyToolTip}"/>
                </Border>
            </notifyIcon:TaskbarIcon.TrayToolTip>
            <!--<i:Interaction.Triggers>
                <i:EventTrigger EventName="TrayLeftMouseUp">
                    <i:InvokeCommandAction Command="{Binding ViewModelNotifyIcon.CommandOpenBalloon}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="TrayMouseMove">
                    <i:InvokeCommandAction Command="{Binding ViewModelNotifyIcon.CommandOpenBalloon}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>-->
            <notifyIcon:TaskbarIcon.ContextMenu>
                <ContextMenu>
                    <MenuItem Command="{Binding StateChangedCommand}" CommandParameter="1" Style="{StaticResource NotifyMenuItem}">
                        <MenuItem.Icon>
                            <Image  Source="/Images/OnLineStatus/online_max.png" Width="12" Height="12"/>
                        </MenuItem.Icon>
                        <MenuItem.Header>
                            <TextBlock Text="在线" Margin="8,0,0,0"/>
                        </MenuItem.Header>
                    </MenuItem>
                    <MenuItem Command="{Binding StateChangedCommand}" CommandParameter="2" Style="{StaticResource NotifyMenuItem}">
                        <MenuItem.Icon>
                            <Image  Source="/Images/OnLineStatus/busy_max.png" Width="12" Height="12"/>
                        </MenuItem.Icon>
                        <MenuItem.Header>
                            <TextBlock Text="忙碌" Margin="8,0,0,0"/>
                        </MenuItem.Header>
                    </MenuItem>
                    <MenuItem Command="{Binding StateChangedCommand}"  CommandParameter="3" Style="{StaticResource NotifyMenuItem}">
                        <MenuItem.Icon>
                            <Image Source="/Images/OnLineStatus/leave_max.png" Width="12" Height="12"/>
                        </MenuItem.Icon>
                        <MenuItem.Header>
                            <TextBlock Margin="8,0,0,0" Text="离开"/>
                        </MenuItem.Header>
                    </MenuItem>
                    <MenuItem  Command="{Binding Path=CommandLogoutSystem}" Style="{StaticResource NotifyMenuItem}">
                        <MenuItem.Header>
                            <TextBlock Margin="8,0,0,0" Text="注销"/>
                        </MenuItem.Header>
                    </MenuItem>
                    <MenuItem  Command="{Binding Path=CommandExitMainWindow}" CommandParameter="{Binding}" Style="{StaticResource NotifyMenuItem}">
                        <MenuItem.Header>
                            <TextBlock Margin="8,0,0,0" Text="退出"/>
                        </MenuItem.Header>
                    </MenuItem>
                </ContextMenu>
            </notifyIcon:TaskbarIcon.ContextMenu>
        </notifyIcon:TaskbarIcon>
        <!--标题栏-->
        <Grid Grid.Row="0" Background="#1991ED" MouseDown="UIElement_OnMouseDown">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="300"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <!--断网提示-->
            <Label x:Name="offLine" Grid.Column="1" Visibility="{Binding isShowNetwork}" Content="网络连接已经断开" Foreground="White" FontWeight="Bold" Margin="0,0,250,0" Background="#e44545" BorderThickness="5" VerticalAlignment="Center" HorizontalAlignment="Center"></Label>
            <!--最小化、最大化、关闭按钮-->
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,8,0" Grid.Row="0" Grid.Column="1">
                <Button Width="24" Height="24" Name="btn_small" Style="{StaticResource SmallButton}" ToolTip="最小化" Command="{Binding MinimizeWindow}" CommandParameter="{Binding ElementName=mainWindow}"/>
                <Button Width="24" Height="24" Name="btn_max" Style="{StaticResource MaxButton}" ToolTip="最大化" Margin="8,0,0,0" Command="{Binding MaxWindow}" CommandParameter="{Binding ElementName=mainWindow}"/>
                <Button Width="24" Height="24" Name="btn_normal" Style="{StaticResource NormalButton}" ToolTip="还原" Margin="8,0,0,0" Command="{Binding MaxWindow}" CommandParameter="{Binding ElementName=mainWindow}"/>
                <Button Width="24" Height="24" Name="btn_close" Style="{StaticResource CloseButton}"  ToolTip="关闭" Margin="8,0,0,0" Command="{Binding MinWindowToTray}" CommandParameter="{Binding ElementName=mainWindow}"/>

            </StackPanel>
            <StackPanel Grid.Column="0" Orientation="Horizontal" VerticalAlignment="Center">
                <Rectangle x:Name="RecHead" Height="30" Width="30" Stroke="{x:Null}" RadiusX="2" RadiusY="2" Cursor="Hand" VerticalAlignment="Center" HorizontalAlignment="Left"
                           RenderOptions.BitmapScalingMode="HighQuality" Margin="15,0,0,0">
                    <Rectangle.Fill>
                        <ImageBrush x:Name="HeadImage" ImageSource="{Binding HeadPic}"/>
                    </Rectangle.Fill>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeftButtonDown" >
                            <i:InvokeCommandAction Command="{Binding HeadCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Rectangle>
                <TextBlock x:Name="TxtName" HorizontalAlignment="Left" VerticalAlignment="Center" Text="{Binding UserName}" Foreground="#ffffff" Margin="10,0,0,0"
                           FontSize="14" FontWeight="Bold" ToolTip="{Binding Path=Text,ElementName=TxtName}"/>
                <StackPanel x:Name="panel_status" Style="{StaticResource StackPanel_Status}" Margin="10,0,0,0" Height="16">
                    <!--<Image x:Name="status_image" HorizontalAlignment="Left" VerticalAlignment="Center" Stretch="Fill" Width="10" Height="10" Margin="4,0,4,0" Source="{Binding StatusImage}"/>-->
                    <ComboBox  HorizontalAlignment="Left" ItemsSource="{Binding UserOnlineStates}" Style="{StaticResource OnlineStateComboBoxStyle}"   
                               SelectedItem="{Binding UserSelectedState,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Height="30" Grid.RowSpan="2" VerticalAlignment="Center" Margin="-12,4,4,0">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" Margin="5,5,0,5" Width="60">
                                    <Image Source="{Binding StateImage}" Stretch="None" ></Image>
                                    <TextBlock Text="{Binding StateContent}" Margin="10,0,0,0"/>
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="SelectionChanged" >
                                <i:InvokeCommandAction Command="{Binding StateChangedCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </ComboBox>
                    <!--<Button Style="{StaticResource Login4-BtnStyle}" Margin="10,0,4,0" VerticalAlignment="Center" HorizontalAlignment="Left"/>-->
                    <!--<StackPanel.ContextMenu>
                    <ContextMenu x:Name="contextMenu" Style="{StaticResource ResourceKey=ContextMenuStyle}">
                        <MenuItem  Header="在线" Command="{Binding MenuItemClick}" CommandParameter="在线">
                            <MenuItem.Icon>
                                <Image Source="pack://application:,,,/AntennaChat;Component/Images/OnLineStatus/在线.png" Height="12"></Image>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="忙碌" Command="{Binding MenuItemClick}" CommandParameter="忙碌">
                            <MenuItem.Icon>
                                <Image Source="pack://application:,,,/AntennaChat;Component/Images/OnLineStatus/忙碌.png" Height="12"></Image>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="离开" Command="{Binding MenuItemClick}" CommandParameter="离开">
                            <MenuItem.Icon>
                                <Image Source="pack://application:,,,/AntennaChat;Component/Images/OnLineStatus/离开.png" Height="12"></Image>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="离线" Command="{Binding MenuItemClick}" CommandParameter="离线">
                            <MenuItem.Icon>
                                <Image Source="pack://application:,,,/AntennaChat;Component/Images/OnLineStatus/离线.png" Height="12"></Image>
                            </MenuItem.Icon>
                        </MenuItem>
                    </ContextMenu>
                </StackPanel.ContextMenu>-->
                    <!--<i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded" >
                        <i:InvokeCommandAction Command="{Binding StackPanelInitialized}" CommandParameter="{Binding ElementName=panel_status}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding ContextMenuCommand}" CommandParameter="{Binding ElementName=contextMenu}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>-->
                </StackPanel>
            </StackPanel>
        </Grid>
        <!--内容-->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="60"/>
                <ColumnDefinition Width="255" MinWidth="254" MaxWidth="400"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <!--第一栏-->
            <Grid Grid.Column="0" Background="#FFFFFF">
                <Border BorderBrush="#ECECEC" BorderThickness="0,0,1,0"/>
                <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,30,0,0">
                    <Grid >
                        <RadioButton Width="24" GroupName="mainTool" Margin="0,6,0,0" Height="24" Name="Btn_Session" VerticalAlignment="Top" Style="{DynamicResource MessageRadioButton}" SnapsToDevicePixels="True" ToolTip="消息" IsChecked="{Binding SessionSelected}"/>
                        <Ellipse Height="12" StrokeThickness="1" Stroke="White" Width="12" Fill="Red" VerticalAlignment="Top" Visibility="{Binding IsUnreadMsg,Converter={StaticResource boolToVisibilityConverter}}" Margin="14,2,0,0" HorizontalAlignment="Left"/>
                    </Grid>
                    <RadioButton Width="24" Height="24" GroupName="mainTool" Name="Btn_Group" VerticalAlignment="Top" Style="{DynamicResource GroupRadioButton}" SnapsToDevicePixels="True" Margin="0,26,0,0" ToolTip="讨论组" IsChecked="{Binding GroupSelected}"/>
                    <RadioButton Width="24" Height="24" GroupName="mainTool" Name="Btn_Contact" VerticalAlignment="Top" Style="{DynamicResource LinkManRadioButton}" SnapsToDevicePixels="True" Margin="0,26,0,0" ToolTip="联系人" IsChecked="{Binding ContactSelected}"/>
                </StackPanel>
                <Button x:Name="btn_setting" Height="30" Width="40" Style="{StaticResource SystemSettingButton}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Cursor="Hand" Margin="0,0,0,25" ToolTip="设置" Command="{Binding OpenSettingCommand}"/>
                <!--heigh=110-->
                <Popup x:Name="pop_setting"  PopupAnimation="Fade" Width="80" Height="80" PlacementTarget="{Binding ElementName=btn_setting}" Placement="Top" HorizontalOffset="-20"  StaysOpen="False" IsOpen="{Binding PopSetOpen}" AllowsTransparency="True">
                    <Border>
                        <Border.Background>
                            <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/设置弹框.png" Stretch="Fill"/>
                        </Border.Background>
                        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Top" Orientation="Vertical" Margin="0,6,0,0">
                            <Button x:Name="btn_sys" Style="{StaticResource TransparentButton_Style}" Width="68" Height="30" Content="系统设置" Command="{Binding SettingCommand}"/>
                            <Button x:Name="btn_sugg" Style="{StaticResource TransparentButton_Style}" Width="68" Height="30" Content="意见反馈" Visibility="Collapsed"/>
                            <Button x:Name="btn_logout" Style="{StaticResource TransparentButton_Style}" Width="68" Height="30" Content="注销登录" Command="{Binding LoginOut}" CommandParameter="{Binding ElementName=mainWindow}"/>
                        </StackPanel>
                    </Border>
                </Popup>
            </Grid>
            <!--第二栏-->
            <Grid Grid.Column="1"  Resource:PreviewKeyDownBehavior.PreviewKeyDownCommand="{Binding GlobalSearchCommand}" KeyDown="UIElement_OnKeyDown">
                <Grid.RowDefinitions>
                    <RowDefinition Height="52"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Button Height="16" Width="16" Style="{StaticResource DeleteButton}" Margin="172,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" Command="{Binding DeleteCommand}" Visibility="{Binding SearchContactName,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay,Converter={StaticResource toVisibilityConverter} }"/>
                <StackPanel Grid.Row="0" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="10,0,14,0" ZIndex="-1">
                    <TextBox x:Name="txtSearch" Style="{StaticResource SearchTextBox}" Height="28" Resource:WatermarkPasswordBox.Watermark="搜索联系人" 
                             VerticalAlignment="Stretch"  VerticalContentAlignment="Center" HorizontalAlignment="Stretch" Width="188" Text="{Binding SearchContactName,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="TextChanged">
                                <i:InvokeCommandAction Command="{Binding QueryConditionChanged}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewKeyDown">
                                <ei:CallMethodAction TargetObject="{Binding}" MethodName="TxtSearch_OnPreviewKeyDown"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBox>
                    <Button Style="{StaticResource AddButton}" Height="28" Width="22" Margin="10,0,0,0" ToolTip="创建讨论组" Command="{Binding CreateGroupCommand}"/>
                </StackPanel>
                <ContentControl x:Name="control" Grid.Row="1" Content="{Binding Path=SecondPartViewModel}"/>
            </Grid>
            <GridSplitter Grid.Column="1" Background="#EAEFF3" Width ="1"/>
            <!--第三栏Old-->
            <!--<ContentControl Grid.Column="2" Content="{Binding ThirdPartViewModel}"/>-->
            <!--第三栏New-->
            <Grid Grid.Column="2" x:Name="ThirdPartViewModel" x:FieldModifier="public">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded">
                        <i:InvokeCommandAction Command="{Binding GridLoadedCommand}" CommandParameter="{Binding ElementName=ThirdPartViewModel}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Grid>
        </Grid>
    </Grid>
</Window>
