<UserControl x:Class="AntennaChat.Views.Talk.TalkGroupWindowView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:AntennaChat.Views.Talk"
             xmlns:viewModel="clr-namespace:AntennaChat.ViewModel.Talk"
             xmlns:noticeWindow="clr-namespace:AntennaChat.Views.Notice"
             xmlns:noticeModel="clr-namespace:AntennaChat.ViewModel.Notice"
              xmlns:voteWindow="clr-namespace:AntennaChat.Views.Vote"
             xmlns:voteModel="clr-namespace:AntennaChat.ViewModel.Vote"
             xmlns:activityWindow="clr-namespace:AntennaChat.Views.Activity"
             xmlns:activityModel="clr-namespace:AntennaChat.ViewModel.Activity"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
             xmlns:re="clr-namespace:AntennaChat.Resource"
             xmlns:conVM="clr-namespace:AntennaChat.ViewModel.Contacts"
             xmlns:conV="clr-namespace:AntennaChat.Views.Contacts"
             mc:Ignorable="d" 
             d:DesignHeight="600" d:DesignWidth="800" SizeChanged="TalkGroupWindowView_OnSizeChanged">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/AntennaChat;component/Resource/talkWindowStyle.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <DataTemplate DataType="{x:Type viewModel:GroupMemberListViewModel}">
                <local:GroupMemberListView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:TalkHistoryViewModel}">
                <local:TalkHistoryView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type noticeModel:NoticeWindowListsViewModel}">
                <noticeWindow:NoticeListWindow/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type conVM:UserInfoViewModel}">
                <conV:UserInfoView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type noticeModel:NoticeAddWindowViewModel}">
                <noticeWindow:NoticeAddWindow/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type voteModel:VoteListViewModel}">
                <voteWindow:VoteListView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type voteModel:CreateVoteViewModel}">
                <voteWindow:CreateVoteView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type activityModel:ActivityListViewModel}">
                <activityWindow:ActivityListView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type activityModel:ActivityDetailsViewModel}">
                <activityWindow:ActivityDetailsView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type activityModel:ReleaseActivityViewModel}">
                <activityWindow:ReleaseActivityView/>
            </DataTemplate>
            <!--<DataTemplate DataType="{x:Type voteModel:VoteDetailViewModel}">
                <voteWindow:VoteDetailView/>
            </DataTemplate>-->
            <!--<DataTemplate DataType="{x:Type voteModel:VoteDetailViewModel}">
                <voteWindow:VoteResultView/>
            </DataTemplate>-->
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid x:Name="grid">
        <Grid.RowDefinitions>
            <RowDefinition Height="52"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition  x:Name="fileUploadShow" Height="{Binding FileUploadShowHeight}"/>
            <RowDefinition Height="{Binding SoundRecordShowHeight}"/>
            <RowDefinition Height="{Binding TextShowRowHeight}"/>
            <RowDefinition Height="38"></RowDefinition>
            <RowDefinition Height="70"></RowDefinition>
            <RowDefinition Height="52"></RowDefinition>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Background="#f5f5f5">
            <TextBox x:Name="txtName" x:FieldModifier="public" Margin="20,0,0,0" Text="{Binding GroupName}" VerticalAlignment="Center" HorizontalAlignment="Left" Foreground="#333333" FontSize="18" 
                 Style="{StaticResource NoBorderTextBox}"  ToolTip="{Binding Path=Text,ElementName=txtName}" Visibility="{Binding txtNameVisibility}" MaxLength="10"/>
            <TextBox x:Name="lab_Name" Margin="20,0,0,0" Text="{Binding GroupName}" VerticalAlignment="Center" HorizontalAlignment="Left" Foreground="#333333" FontSize="18" 
                 Style="{StaticResource TitleTextBox}"  ToolTip="{Binding Path=Text,ElementName=lab_Name}" Visibility="{Binding labNameVisibility}" MaxLength="10" IsReadOnly="True">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewMouseDown">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="labNamePreviewMouseDown"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
            <Image Margin="0,0,156,0" Height="24" Width="24" x:Name="imageActivity" VerticalAlignment="Center" Stretch="None" HorizontalAlignment="Right" ToolTip="活动" Visibility="{Binding NoticeVisibility}">
                <Image.Style>
                    <Style  TargetType="Image">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Source" Value="{DynamicResource BitmapGroupActivity_IsMouseEnter}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="false">
                                <Setter Property="Source" Value="{DynamicResource  BitmapGroupActivityIcon}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding ActivityListShowCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Image>
            <Image Margin="0,0,122,0" Height="24" Width="24" x:Name="imageVote" VerticalAlignment="Center" Stretch="None" HorizontalAlignment="Right" ToolTip="投票" Visibility="{Binding NoticeVisibility}">
                <Image.Style>
                    <Style  TargetType="Image">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Source" Value="{DynamicResource BitmapGroupVote_IsMouseEnter}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="false">
                                <Setter Property="Source" Value="{DynamicResource  BitmapGroupVoteIcon}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding VoteListShowCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Image>
            <Image Margin="0,0,88,0" Height="24" Width="24" x:Name="imageNotice" VerticalAlignment="Center" Stretch="None" HorizontalAlignment="Right" ToolTip="公告" Visibility="{Binding NoticeVisibility}">
                <Image.Style>
                    <Style  TargetType="Image">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Source" Value="{DynamicResource BitmapGroupNotic_IsMouseEnter}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="false">
                                <Setter Property="Source" Value="{DynamicResource  BitmapGroupNoticIcon}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding NoticeListIsShow}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Image>
            <Image Margin="0,0,20,0" Height="24" Width="24" VerticalAlignment="Center" Stretch="None" HorizontalAlignment="Right" ToolTip="邀请加入">
                <Image.Style>
                    <Style  TargetType="Image">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Source" Value="{DynamicResource BitmapInvitGroupMember_IsMouseEnter}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="false">
                                <Setter Property="Source" Value="{DynamicResource BitmapInvitGroupMember}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding InviteToGroupMouseLeftButtonDown}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Image>
            <!--<Image Margin="0,0,88,0" Height="24" Width="24" VerticalAlignment="Center" HorizontalAlignment="Right"  Source ="pack://application:,,,/AntennaChat;Component/Images/群成员-1.png"/>-->
            <!--<Rectangle Margin="0,0,54,0"  Width="24" VerticalAlignment="Bottom" HorizontalAlignment="Right" Height="2" Fill="#22ADFE" Visibility="{Binding GroupMemberVisibility}"/>-->
            <Image Margin="0,0,54,0" x:Name="imgGroup"  VerticalAlignment="Center" Stretch="None" HorizontalAlignment="Right"   ToolTip="讨论组成员">
                <Image.Style>
                    <Style  TargetType="Image">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Source" Value="{DynamicResource  BitmapTalkGroupIcom_IsMouseEnter}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="false">
                                <Setter Property="Source" Value="{DynamicResource BitmapTalkGroupIcom}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding GroupMemeberImageMouseLeftButtonDown}"/>
                    </i:EventTrigger>
                    <!--<i:EventTrigger EventName="MouseEnter">
                    <i:InvokeCommandAction Command="{Binding GroupMemeberImageMouseEnter}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeave">
                    <i:InvokeCommandAction Command="{Binding GroupMemeberImageMouseLeave}" />
                </i:EventTrigger>-->
                </i:Interaction.Triggers>

            </Image>
        </Grid>
        <Grid Grid.Row="1">
            <Grid Grid.Row="1" Grid.Column="0" Background="#f5f5f5">
                <ContentControl Content="{Binding  chromiumWebBrowser}" Visibility="{Binding isShowWinMsg}" Margin="0,0,6,0"></ContentControl>
                <ContentControl Content="{Binding  chromiumWebBrowserburn}" Visibility="{Binding isShowBurnWinMsg}" Margin="0,0,6,0"></ContentControl>
                <Border Background="Black" Opacity="0.5" HorizontalAlignment="Center" Visibility="{Binding IsRevocationShowPopup,Converter={StaticResource BooleanToVisibilityConverter}}" VerticalAlignment="Center" CornerRadius="2">
                    <TextBlock Text="发出超过2分钟，无法撤回。" Foreground="White" Margin="10"/>
                </Border>
            </Grid>
            <!--<GridSplitter  Background="#EAEFF3" Width ="1" IsEnabled="False"  Visibility="{Binding GroupMemberVisibility}"/>-->
        </Grid>
        <!--聊天记录-->
        <!--<ContentControl Content="{Binding Path=TalkHistoryViewModel}" Visibility="{Binding TalkHistoryVisibility}" Grid.Row="0" Grid.Column="0" Grid.RowSpan="2"/>-->
        <!--上传文件显示区域-->
        <Grid x:Name="fileUploadShows" Grid.Row="2" Grid.Column="1">
            <!--<ContentControl Content="{Binding fileMultiUpload}"></ContentControl>-->
            <Grid.ColumnDefinitions>
                <ColumnDefinition></ColumnDefinition>
                <ColumnDefinition Width="126"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Border BorderThickness="0,1,0,0" BorderBrush="#EAEFF3"></Border>
            <Grid Grid.Row="0" Grid.Column="0">
                <ScrollViewer x:Name="SV" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
                    <!--<WrapPanel x:Name="wPanel" Orientation="Horizontal" Margin="15">
                    </WrapPanel>-->
                    <ContentControl Content="{Binding  wrapPanel}"></ContentControl>
                </ScrollViewer>
            </Grid>

            <Grid Grid.Row="0" Grid.Column="1">
                <Border BorderThickness="0,1,0,0" BorderBrush="#EAEFF3"></Border>
                <StackPanel Orientation="Vertical">
                    <Button x:Name="btnOkUploadFile" Style="{StaticResource btnOkUploadFileStyle}" Content="发送" Command="{Binding btnSendUploadFile}"></Button>
                    <Button x:Name="btnCanelUploadFile" Style="{StaticResource btnCanelUploadFileStyle}" Command="{Binding btnCanelUpLoadFile}" Content="取消"></Button>
                </StackPanel>
            </Grid>
        </Grid>
        <Popup x:Name="emojiShow" PlacementTarget="{Binding ElementName=hello}" PopupAnimation="None" Width="210" Height="150" StaysOpen="False" IsOpen="False">
            <!--<StackPanel x:Name="emojiStackPanel" Height="100" Width="200" Background="AliceBlue"></StackPanel>-->
            <WrapPanel x:Name="emojiStackPanel" Background="AliceBlue"/>
        </Popup>
        <!--录制语音显示区域-->
        <Grid Grid.Row="3">
            <Border BorderThickness="0,1,0,0" BorderBrush="#EAEFF3"/>
            <Grid>
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Left"  Panel.ZIndex="1" Orientation="Horizontal">
                    <Ellipse Height="7" Width="7" Fill="#1DB300"  Margin="20,1,0,0"/>
                    <TextBlock Text="正在录音..." HorizontalAlignment="Left" VerticalAlignment="Center" Margin="10,0,0,0" Foreground="#333333"/>
                </StackPanel>
                <ProgressBar Name="ProgressBar" HorizontalAlignment="Stretch"  Height="32"  Style="{DynamicResource SimpleProgressBar}" Value="{Binding SoundProValue}" VerticalAlignment="Center" Margin="0" Maximum="360"/>
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Right"  Panel.ZIndex="1" Orientation="Horizontal">
                    <Button Height="22" Width="44" Content="发送" Style="{StaticResource SoundButtonStyle}" BorderBrush="#1991ED" BorderThickness="1" Foreground="#1991ED" Command="{Binding SendSoundCommand}"/>
                    <Button Height="22" Width="44" Content="取消" Margin="10,0,20,0" Style="{StaticResource SoundButtonStyle}" BorderBrush="#FE3203" BorderThickness="1" Foreground="#FE3203" Command="{Binding CancelSoundCommand}"/>
                </StackPanel>
            </Grid>
        </Grid>
        <Grid Grid.Row="4" Background="#D2EBFF">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDown">
                    <i:InvokeCommandAction Command="{Binding textBlockCommand}" CommandParameter="{Binding ElementName=TextBlockShow}"></i:InvokeCommandAction>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <TextBlock x:Name="TextBlockShow" TextTrimming="CharacterEllipsis" Cursor="Hand" Text="{Binding TextShowReceiveMsg}"  VerticalAlignment="Center" Foreground="Gray" Height="32" Padding="10,8"></TextBlock>
        </Grid>
        <!--表情栏位-->
        <Grid Grid.Row="5" Grid.Column="1" x:Name="hello" Background="#f5f5f5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"></ColumnDefinition>
                <ColumnDefinition Width="auto"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="auto"></ColumnDefinition>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="auto"></ColumnDefinition>
                <ColumnDefinition Width="auto"></ColumnDefinition>
                <ColumnDefinition Width="auto"></ColumnDefinition>
                <ColumnDefinition></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Border BorderThickness="0,1,0,0" BorderBrush="#EAEFF3" Grid.Row="0" Grid.ColumnSpan="10"></Border>
            <Grid Grid.Row="0" Grid.Column="0" Margin="16,0,0,0" Visibility="{Binding isShowEmoji}">
                <Button x:Name="btnImageShow" ToolTip="选择表情" GotFocus="Rich_OnGotFocus"  Command="{Binding btnShowPopupCommand}" Style="{StaticResource btnImageShowStyle}" CommandParameter="{Binding ElementName=emojiShow}"/>
            </Grid>
            <Grid Grid.Row="0" Grid.Column="1" Margin="16,0,0,0" Visibility="{Binding isShowCutImage}">
                <Button x:Name="btnCutImage" ToolTip="屏幕截图" GotFocus="Rich_OnGotFocus"  Style="{StaticResource btnCutImageStyle}" Command="{Binding btnCutImageCommand}"/>
            </Grid>
            <Grid Grid.Row="0" Grid.Column="2" x:Name="switchGrid" Margin="16,0,0,0">
                <Button x:Name="btnSendImage" ToolTip="选择图片" GotFocus="Rich_OnGotFocus"  Style="{StaticResource btnSendImagesStyle}" Command="{Binding btnImagesUploadCommand}"/>
            </Grid>
            <Grid Grid.Row="0" Grid.Column="3" Margin="16,0,0,0">
                <Button x:Name="btnSendFile" ToolTip="上传文件" GotFocus="Rich_OnGotFocus"  Style="{StaticResource btnSendFileStyle}" Command="{Binding btnFileUploadCommand}" CommandParameter="{Binding ElementName=fileUploadShow}"/>
            </Grid>
            <Grid Grid.Row="0" Grid.Column="4" Margin="16,0,0,0">
                <Button x:Name="btnSendSound" ToolTip="录制语音" Style="{StaticResource btnSendSoundStyle}" Command="{Binding BtnSoundCommand}" CommandParameter="{Binding ElementName=btnSendSound}"></Button>
            </Grid>
            <Grid Grid.Row="0" Grid.Column="5" Margin="16,0,0,0" Visibility="{Binding isShowBurn}">
                <Button x:Name="btnBurnAfter" ToolTip="切换无痕模式" GotFocus="Rich_OnGotFocus"  Style="{StaticResource btnIncognitoModeStyle}"  Command="{Binding btnReadBurnAfterCommand}" CommandParameter="{Binding ElementName=btnBurnAfter}"/>
            </Grid>

            <Grid Grid.Row="0" Grid.Column="6" Margin="16,0,0,0" Visibility="{Binding isShowExit}">
                <Button x:Name="btnBurnExit" ToolTip="退出无痕模式" GotFocus="Rich_OnGotFocus"  Style="{StaticResource btnBurnExitStyle}"  Command="{Binding btnBurnExitCommand}" CommandParameter="{Binding ElementName=btnBurnExit}"/>
            </Grid>
            <Grid Grid.Row="0" Grid.Column="7" Margin="16,0,0,0" Visibility="{Binding isShowDelete}">
                <Button x:Name="btnDelete" ToolTip="删除无痕模式消息记录" GotFocus="Rich_OnGotFocus"  Style="{StaticResource btnDeleteStyle}" Command="{Binding btnDeleteCommand}"/>
            </Grid>
            <Grid Grid.Column="8" Visibility="{Binding IsIncognitoModelState,Converter={StaticResource BooleanToVisibilityConverter}}">
                <Rectangle  Height="14" Fill="Gray" Width="1" HorizontalAlignment="Left" Margin="14,0,0,0" />
                <Image  Source="{DynamicResource BitmapIncognitoModeState}" ToolTip="当前处于无痕模式" Stretch="None" Margin="28,0,0,0"/>
            </Grid>


            <Grid Grid.Row="0" Grid.Column="9" Visibility="Hidden">
                <Button x:Name="btnHistoryMsg" Style="{StaticResource btnHistoryMsgStyle}" Command="{Binding HistoryCommand}" ToolTip="历史记录"/>
            </Grid>
        </Grid>

        <!--发送文字栏位-->
        <Grid Grid.Row="6" Grid.Column="1" x:Name="sendGrid" >
            <!--<ContentControl Content="{Binding richTextBox}"/>-->
            <re:RichTextBoxEx BorderThickness="0" VerticalScrollBarVisibility="Auto" Background="#f5f5f5" IsReadOnly="True" LostFocus="Rich_OnLostFocus" GotFocus="Rich_OnGotFocus" Padding="20, 10, 20, 0" x:Name="rich" AutoAddWhiteSpaceAfterTriggered="True" ContentAssistTriggers="{Binding ContentAssistTriggers}" AllowDrop="True">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded">
                        <i:InvokeCommandAction Command="{Binding RichTextBoxCommand}" CommandParameter="{Binding ElementName=rich}"/>
                    </i:EventTrigger>
                    <!--<i:EventTrigger EventName="PreviewDragOver">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="richTextBox_PreviewDragOver"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="PreviewDrop">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="richTextBox_PreviewDrop"/>
                    </i:EventTrigger>-->
                </i:Interaction.Triggers>
            </re:RichTextBoxEx>
        </Grid>
        <!--发送按钮栏位-->
        <Grid Grid.Row="7" Grid.Column="1" x:Name="gridSend" Background="#f5f5f5">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,0,20,0">
                <Button x:Name="btnSendMsg" Style="{StaticResource BtnTalkSendMsgStyle}" Content="发送" Command="{Binding btnSendMsgCommand}" Width="56" Height="28"/>
                <Button x:Name="btnSenMsgSetting" Style="{StaticResource BtnSendMsgSettingStyle}"  Margin="-1,0,0,0" Command="{Binding btnSetShortCuts}" Width="30" Height="28" CommandParameter="{Binding ElementName=btnSenMsgSetting}" />
            </StackPanel>
            <Border Width="1" Background="#e0e0e0" Margin="0,0,50,0"  Height="12" HorizontalAlignment="Right"/>
        </Grid>
        <!--@提示-->
        <Button x:Name="btnTips" Command="{Binding btnScrollPosition}" 
                Visibility="{Binding IsbtnTipShow}" 
                HorizontalAlignment="Right" Margin="{Binding ScrollPosition}" 
                Content="{Binding SetContents}" 
                Background="#ffffff" Foreground="#22aeff" 
                BorderThickness="1" FontSize="14" BorderBrush="#f1f1f1" VerticalAlignment="Top" Grid.Row="1"/>

        <Border SnapsToDevicePixels="True" CornerRadius="2"  
         VerticalAlignment="Bottom" Grid.Row="6" Grid.ColumnSpan="2" HorizontalAlignment="Right" Margin="0,0,30,-10"   Visibility="{Binding isShowPopup,Converter={StaticResource BooleanToVisibilityConverter}}">
            <Border.Background>
                <VisualBrush Stretch="Fill">
                    <VisualBrush.Visual>
                        <Path  Fill="White" Stroke="#cccccc" StrokeThickness="1" Data="M0.5,0.49999999 L0.5,0.49999999 190.5,0.49999999 190.5,0.49999999 190.5,90.5 190.5,90.5 161.83334,90.5 161.83334,90.5 156.50001,109.83333 156.50001,109.83333 151.83334,90.5 151.83334,90.5 0.5,90.5 z">
                            <Path.Effect>
                                <DropShadowEffect Color="Gainsboro" BlurRadius="12" ShadowDepth="0" Opacity="0.7" />
                            </Path.Effect>
                        </Path>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Border.Background>
            <Grid Margin="24,12,16,14">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Ellipse Height="15" Width="15" Fill="Red"  Margin="0,0,0,2"/>
                <TextBlock Text="!" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,2" Foreground="White"/>
                <TextBlock FontSize="12" Grid.Column="1" Margin="6,0,10,2" HorizontalAlignment="Center" VerticalAlignment="Center"   Opacity="0.8" Text="{Binding showText}"/>
            </Grid>
        </Border>
        <Popup x:Name="pop_Notice" Grid.RowSpan="7" PopupAnimation="None" HorizontalAlignment="Right"  MinWidth="180" Height="588"  PlacementTarget="{Binding ElementName=imageNotice}" HorizontalOffset="-190"  VerticalOffset="-36" Placement="Top"  StaysOpen="False" IsOpen="{Binding IsShowNoticeList,Mode=TwoWay}" AllowsTransparency="True" Margin="0,0,0,5" VerticalAlignment="Bottom">
            <ContentControl Content="{Binding Path=NoticeWindowListsViewModel}"/>
        </Popup>
        <ContentControl Content="{Binding Path=NoticeCreateVM}" Visibility="{Binding NoticeWindowListsViewModelVisibility}"  Grid.Row="0" Grid.Column="0" Grid.RowSpan="8"/>
        <Popup Grid.Row="1" Grid.Column="0" Name="PopUserInfo" PopupAnimation="Fade"  HorizontalOffset="4" Height="326" Width="310" Placement="Mouse"  StaysOpen="False" IsOpen="{Binding PopUserInfoIsOpen}" AllowsTransparency="True">
            <ContentControl Content="{Binding Path=UserInfoControl}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Popup>
        <Popup x:Name="pop_Blend" Grid.RowSpan="7" PopupAnimation="None" HorizontalAlignment="Right"  MinWidth="180" Height="588"  PlacementTarget="{Binding ElementName=imgGroup}" HorizontalOffset="-220"  VerticalOffset="-36" Placement="Top"  StaysOpen="False" IsOpen="{Binding IsShowGroupMember,Mode=TwoWay}" AllowsTransparency="True" Margin="0,0,0,5" VerticalAlignment="Bottom">
            <ContentControl  Content="{Binding Path=GroupMemberListViewModel}"/>
        </Popup>
    </Grid>
</UserControl>
