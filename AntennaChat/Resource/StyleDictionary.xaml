<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:AntennaChat.Resource"                    
                    xmlns:c="clr-namespace:AntennaChat.ViewModel">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <!--带水印提示的搜索TextBox样式-->
    <Style x:Key="SearchTextBoxStyle" TargetType="{x:Type local:WateMarkTextBox}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#AAB5C0"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="MinWidth" Value="45"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:WateMarkTextBox}">
                    <Grid Opacity="{TemplateBinding Opacity}" >
                        <Border BorderBrush="{TemplateBinding BorderBrush}"  CornerRadius="2" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="36"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="25"/>
                                </Grid.ColumnDefinitions>
                                <Image  Source="pack://application:,,,/AntennaChat;Component/Images/搜索.png" Height="16" Margin="10,0,10,0"></Image>
                                <TextBox Grid.Column="1" x:Name="ChildTextBox" VerticalContentAlignment="Center"  IsTabStop="True"  
                                         Padding="{TemplateBinding Padding}"  BorderThickness="0" Background="Transparent" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Text}"/>
                                <Label x:Name="ChildWateMark" VerticalAlignment="Stretch"  VerticalContentAlignment="Center"  Foreground="LightGray" Content="{TemplateBinding WateMark}" Grid.Column="1" />

                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--带水印提示的搜索TextBox样式(针对编辑讨论组界面定制)-->
    <Style x:Key="SearchTextBoxStyleForEditGroup" TargetType="{x:Type local:WateMarkTextBox}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Background" Value="#ffffff"/>
        <Setter Property="BorderBrush" Value="#e0e0e0"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="MinWidth" Value="45"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:WateMarkTextBox}">
                    <Grid Opacity="{TemplateBinding Opacity}" >
                        <Border BorderBrush="{TemplateBinding BorderBrush}"  CornerRadius="2" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="36"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="25"/>
                                </Grid.ColumnDefinitions>
                                <Image  Source="pack://application:,,,/AntennaChat;Component/Images/搜索.png" Height="16" Margin="10,0,10,0"></Image>
                                <TextBox Grid.Column="1" x:Name="ChildTextBox" VerticalContentAlignment="Center"  IsTabStop="True"  
                                         Padding="{TemplateBinding Padding}"  BorderThickness="0" Background="Transparent" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Text}"/>
                                <Label x:Name="ChildWateMark" VerticalAlignment="Stretch" VerticalContentAlignment="Center"  Foreground="#cccccc" Content="{TemplateBinding WateMark}" Grid.Column="1" />
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--带水印提示的TextBox样式-->
    <Style x:Key="WateMarkTextBoxStyle" TargetType="{x:Type local:WateMarkTextBox}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="{Binding BorderBrush}"/>
        <Setter Property="Padding" Value="{Binding  Padding}" />
        <Setter Property="BorderThickness" Value="{Binding BorderThickness}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="MinWidth" Value="45"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:WateMarkTextBox}">
                    <Grid Opacity="{TemplateBinding Opacity}" >
                        <Border BorderBrush="{TemplateBinding BorderBrush}"  CornerRadius="1" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" >
                            <Grid>
                                <TextBox Grid.Column="0" x:Name="ChildTextBox"    VerticalContentAlignment="Center"  IsTabStop="True" 
                                   MaxLength="{TemplateBinding MaxLength}" Padding="{TemplateBinding Padding}" BorderThickness="0" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" Text="{TemplateBinding Text}" />
                                <Label x:Name="ChildWateMark" Margin="5,0" VerticalAlignment="Stretch"  VerticalContentAlignment="Center"  Padding="{TemplateBinding Padding}"  Background="{TemplateBinding Background}" Foreground="#999999"  Content="{TemplateBinding WateMark}" Grid.Column="0"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--搜索框-->
    <Style x:Key="SearchTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Background" Value="#ffffff"/>
        <Setter Property="BorderBrush" Value="#e0e0e0"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="MinWidth" Value="45"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="36"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image  Source="pack://application:,,,/AntennaChat;Component/Images/搜索.png" Height="16" Margin="10,0,10,0"/>
                            <Label x:Name="ChildWateMark" VerticalAlignment="Center" Padding="{TemplateBinding Padding}" VerticalContentAlignment="Stretch"  HorizontalContentAlignment="Left"  Foreground="#cccccc"
                                   Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:WatermarkPasswordBox.Watermark)}" Grid.Column="1"/>
                            <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Padding="{TemplateBinding Padding}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--带水印文本框(密码框不用这个，有bug)-->
    <Style x:Key="WaterMarkTextBox" TargetType="{x:Type local:SJTextBox}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="Cursor" Value="IBeam"/>
        <Setter Property="Padding" Value="20,0,0,0"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#333333"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SJTextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding BorderCornerRadius}" 
                        SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" Margin="15,4,0,0" Padding="{TemplateBinding Padding}" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            <TextBlock x:Name="txtRemark" Text="{TemplateBinding WaterRemark}" Foreground="Gray" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" FontSize="{TemplateBinding FontSize}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <!--使用触发器来控制水印的隐藏显示：当文本框没有字符时显示水印文字-->
                            <Setter Property="Visibility" Value="Visible" TargetName="txtRemark"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--带水印密码框-->
    <Style x:Key="WaterMarkPasswordBox" TargetType="{x:Type PasswordBox}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="Cursor" Value="IBeam"/>
        <Setter Property="Padding" Value="20,0,0,0"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#333333"/>
        <Setter Property="FontFamily" Value="Microsoft YaHei"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="4"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <TextBlock x:Name="WatermarkTextBlock" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:WatermarkPasswordBox.Watermark)}"                         
                         Margin="{TemplateBinding Padding}" IsHitTestVisible="False" VerticalAlignment="Center" FontSize="{TemplateBinding FontSize}" Foreground="Gray"
                         Style="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:WatermarkPasswordBox.WatermarkStyle)}"/>
                            <ScrollViewer x:Name="PART_ContentHost" Margin="15,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SetPasswordBox" TargetType="{x:Type PasswordBox}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="IBeam"/>
        <Setter Property="Padding" Value="8,0,0,0"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#333333"/>
        <Setter Property="FontFamily" Value="Microsoft YaHei"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border" BorderBrush="#cccccc" BorderThickness="1" Background="{TemplateBinding Background}" CornerRadius="2"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <TextBlock x:Name="WatermarkTextBlock" Margin="8,0,0,0" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:WatermarkPasswordBox.Watermark)}"                         
                        IsHitTestVisible="False" VerticalAlignment="Center" FontSize="{TemplateBinding FontSize}" Foreground="#999999"
                         Style="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:WatermarkPasswordBox.WatermarkStyle)}"/>
                            <ScrollViewer x:Name="PART_ContentHost" Margin="8,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--修改密码页面的密码框-->
    <Style x:Key="ChangePasswordPagePasswordBox" TargetType="{x:Type PasswordBox}">
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Left"></Setter>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="#E1E1E1"/>
        <Setter Property="Cursor" Value="IBeam"/>
        <Setter Property="Padding" Value="20,0,0,0"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="#333333"/>
        <Setter Property="FontFamily" Value="Microsoft YaHei"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <TextBlock x:Name="WatermarkTextBlock" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:WatermarkPasswordBox.Watermark)}"                         
                         Margin="{TemplateBinding Padding}" IsHitTestVisible="False"  VerticalAlignment="Center" HorizontalAlignment="Left" FontSize="{TemplateBinding FontSize}" Foreground="Gray"
                         Style="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:WatermarkPasswordBox.WatermarkStyle)}"/>
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <ScrollViewer.ContextMenu>
                                    <ContextMenu/>
                                </ScrollViewer.ContextMenu>
                            </ScrollViewer>

                        </Grid>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--修改密码页的文本框-->
    <Style x:Key="ChangePaswordTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="border" BorderBrush="#E1E1E1" BorderThickness="1" CornerRadius="2" Background="White">
                        <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" Margin="6,0,0,0">
                            <ScrollViewer.ContextMenu>
                                <ContextMenu/>
                            </ScrollViewer.ContextMenu>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--圆角文本框-->
    <Style x:Key="CornerTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="border" BorderBrush="#E1E1E1" BorderThickness="1" CornerRadius="2" Background="White">
                        <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" Margin="6,0,0,0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <!--定义触发器-->
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <!--通过Condition定义触发条件-->
                                <Condition Property="IsReadOnly" Value="False"/>
                                <!--通过Condition定义触发条件-->
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="SkyBlue" TargetName="border"/>
                        </MultiTrigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Background" Value="#F0F0F0" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--文本框 背景色待修改-->
    <Style x:Key="NoBorderTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="#ffffff"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"  Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" Margin="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--标签文本框-->
    <Style x:Key="TitleTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"  Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" Margin="1"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="#ffffff"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--普通标签样式-->
    <Style x:Key="NormalTextBox" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Foreground" Value="#343434"/>
    </Style>
    <!--清除button样式-->
    <Style x:Key="ClearBtnStyle" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,0,2,0"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Opacity" Value=".75"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Rectangle x:Name="rectClose" Width="28" Height="28" Fill="Transparent"></Rectangle>
                        <Grid>
                            <Canvas HorizontalAlignment="Center" VerticalAlignment="Center" Width="8" Height="8" Margin="10">
                                <Line StrokeThickness="2"  Stroke="{TemplateBinding Foreground}" X1="0" Y1="0" X2="8" Y2="8"></Line>
                                <Line StrokeThickness="2" Stroke="{TemplateBinding Foreground}" X1="0" Y1="8" X2="8" Y2="0"></Line>
                            </Canvas>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsMouseOver"  Value="True">
                            <Setter Property="Opacity" Value="1" />
                            <Setter Property="Foreground" Value="Black"></Setter>
                        </Trigger>
                        <Trigger Property="Button.IsMouseOver"  Value="False">
                            <Setter Property="Opacity" Value="1" />
                            <Setter Property="Foreground" Value="LightGray"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VeriftybtnStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#1991ed"/>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" CornerRadius="2"  Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="#007ce5"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="#007ce5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--红色圆圈为背景的标签样式-->
    <Style  x:Key="RedCircleLabelStyle"  TargetType="Label">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <Grid>
                        <Ellipse   Height="{TemplateBinding Height}" Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}"/>
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center"   VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--普通标签样式-->
    <Style  x:Key="Label_Style" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="#CDCED0"/>
        <Setter Property="Background" Value="#474747"/>
        <Setter Property="Padding" Value="8"/>
    </Style>
    <!--普通边框样式-->
    <Style x:Key="Normal_Border_Style" TargetType="{x:Type Border}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver"  Value="True">
                <Setter Property="BorderBrush" Value="SkyBlue" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="BorderThickness" Value="0.6"/>
        <Setter Property="BorderBrush" Value="#999999"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Margin" Value="4,0"/>
    </Style>
    <!--蓝色背景按钮样式-->
    <Style TargetType="{x:Type Button}" x:Key="BlueButton_Style">
        <Setter Property="Background" Value="#1991ed"/>
        <Setter Property="Foreground" Value="#ffffff"/>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" CornerRadius="2"  Background="{TemplateBinding Background}">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.8"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#008EE0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#FFCDCDD1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--灰色背景按钮样式-->
    <Style TargetType="{x:Type Button}" x:Key="GrayButton_Style">
        <Setter Property="Background" Value="#EEEEEE"/>
        <Setter Property="Foreground" Value="#666666"/>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" CornerRadius="4"  Background="{TemplateBinding Background}">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.8"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--透明背景按钮样式-->
    <Style TargetType="{x:Type Button}" x:Key="TransparentButton_Style">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#777777"/>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" CornerRadius="2"  Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="#D2EFFF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="#ACE2FF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--白色背景按钮样式-->
    <Style TargetType="{x:Type Button}" x:Key="WhiteButton_Style">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="#666666"/>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" CornerRadius="2"  Background="{TemplateBinding Background}" BorderBrush="#f0f0f0" BorderThickness="1">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="#1991ed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--个人资料页签选项按钮样式-->
    <Style TargetType="{x:Type Button}" x:Key="ProfileSelectButtonStyle">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="#333333"/>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" CornerRadius="0"  Background="{TemplateBinding Background}" BorderBrush="#E0E0E0" BorderThickness="0">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#F1EFF0"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#D2EFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--ScrollViewer样式-->
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <!--<ColumnDefinition Width="Auto"/>-->
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Grid.Column="1" Fill="#FFEBF5F6" Grid.Row="1"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}"  CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="0,0,0,0" Grid.Row="0"/>
                        <ScrollBar Opacity="0" x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar"  HorizontalAlignment="Right" Cursor="Arrow"  Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                        <ScrollBar Opacity="0" x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="Mouse.MouseEnter">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.4" Duration="0:0:0.5"/>
                                        <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.4" Duration="0:0:0.5"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Mouse.MouseLeave">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0" BeginTime="0:0:1" Duration="0:0:0.5"/>
                                        <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0" BeginTime="0:0:1" Duration="0:0:0.5"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
                        <Border x:Name="Rectangle1" CornerRadius="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto"  Background="{TemplateBinding Background}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Horizontal">
                            <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                            <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Path x:Name="Chrome" Data="M167.5,212.46L199.5,177.507 231.5,212.46 167.5,212.46z" Stretch="Uniform" Fill="#B2B2B2" Width="6" Height="10" RenderTransformOrigin="0.5,0.5"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--ScrollBars-->
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="#b2b2b2" />
        <Setter Property="Background" Value="#f1f1f1" />
        <Setter Property="Width" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="bgRecStoryBoard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="bgRec">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="bgRecLeaveStoryBoard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="bgRec">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="upBtnMouseStoryBoard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="upBtn">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="upBtnLeaveStoryBoard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="upBtn">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="downBtnMouseStoryBoard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="downBtn">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="downBtnLeaveStoryBoard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="downBtn">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="GridRoot" Width="6"  SnapsToDevicePixels="True" UseLayoutRounding="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="10" MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*" />
                            <RowDefinition  Height="10" MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <RepeatButton x:Name="upBtn" Opacity="0" Grid.Row="0" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}"/>
                        <Rectangle x:Name="bgRec" Grid.Row="1" Fill="{TemplateBinding Background}" RadiusX="3" RadiusY="3" Opacity="0" Visibility="Visible"/>
                        <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true" Focusable="false">
                            <Track.Thumb>
                                <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <RepeatButton x:Name="downBtn" Opacity="0"  Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Style="{StaticResource ScrollBarButton}" RenderTransformOrigin="0.5,0.5">
                            <RepeatButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="180"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </RepeatButton.RenderTransform>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard Storyboard="{StaticResource bgRecStoryBoard}"/>
                            <BeginStoryboard Storyboard="{StaticResource upBtnMouseStoryBoard}"/>
                            <BeginStoryboard Storyboard="{StaticResource downBtnMouseStoryBoard}"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard Storyboard="{StaticResource bgRecLeaveStoryBoard}"/>
                            <BeginStoryboard Storyboard="{StaticResource upBtnLeaveStoryBoard}"/>
                            <BeginStoryboard Storyboard="{StaticResource downBtnLeaveStoryBoard}"/>
                        </EventTrigger>
                        <!--<Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="bgRec" Property="Visibility" Value="Visible"/>
                        </Trigger>-->
                        <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                            <!--<Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width" Value="Auto" />
                            <Setter Property="Height" Value="12" />
                            <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--关闭按钮(图片做背景)-->
    <Style x:Key="CloseButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/关闭-默认-右上角.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="rectangle" Property="Fill">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/关闭-悬停-点击.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--普通关闭按钮样式-->
    <Style x:Key="NormalCloseBtnStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <!--按钮内容-->
                        <Rectangle Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Background}"/>
                        <Grid>
                            <Canvas Name="canvas" HorizontalAlignment="Center" VerticalAlignment="Center" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <Line StrokeThickness="1"  x:Name="line1" Stroke="#8F8F8F" X1="0" Y1="0" X2="{Binding Path=Width,ElementName=canvas}" Y2="{Binding Path=Width,ElementName=canvas}"></Line>
                                <Line StrokeThickness="1" x:Name="line2" Stroke="#8F8F8F" X1="0" Y1="{Binding Path=Width,ElementName=canvas}" X2="{Binding Path=Width,ElementName=canvas}" Y2="0"></Line>
                            </Canvas>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsMouseOver"  Value="True">
                            <Setter TargetName="line1" Property="Stroke" Value="Black"/>
                            <Setter TargetName="line2" Property="Stroke" Value="Black"/>
                        </Trigger>
                        <Trigger Property="Button.IsPressed"  Value="True">
                            <Setter TargetName="line1" Property="Stroke" Value="#8F8F8F"/>
                            <Setter TargetName="line2" Property="Stroke" Value="#8F8F8F"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--最小化按钮-->
    <Style x:Key="SmallButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/最小化-默认-右上角.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="rectangle" Property="Fill">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/最小化-悬停-点击.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--最大化按钮-->
    <Style x:Key="MaxButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/大窗口-默认-右上角.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="rectangle" Property="Fill">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/大窗口-悬停-点击右上角.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <DataTrigger Binding="{Binding IsMaxWin}" Value="False">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsMaxWin}" Value="True">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--恢复常规大小按钮-->
    <Style x:Key="NormalButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/小窗口-默认-右上角.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="rectangle" Property="Fill">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/小窗口-悬停-点击-右上角.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <DataTrigger Binding="{Binding IsMaxWin}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsMaxWin}" Value="True">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--最小化按钮-->
    <Style x:Key="AddButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/创建讨论组-1.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="rectangle" Property="Fill">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/创建讨论组-悬停-点击.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--删除按钮-->
    <Style x:Key="DeleteButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/人员删除-1.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="rectangle" Property="Opacity" Value="0.7">
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="rectangle" Property="Opacity" Value="1">
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--CheckBox-->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="#FFFFFFFF"/>
        <Setter Property="BorderBrush" Value="#FF707070"/>
        <Setter Property="Foreground" Value="Gray"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="#FF212121" Margin="1" Opacity="0" Stretch="None"/>
                                <Rectangle x:Name="indeterminateMark" Fill="#FF212121" Margin="2" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="Bottom"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFF3F9FF"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FF5593FF"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="#FF212121"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="#FF212121"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFE6E6E6"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FFBCBCBC"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="#FF707070"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="#FF707070"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="#FFD9ECFF"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="#FF3C77DD"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="#FF212121"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="#FF212121"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                            <Setter Property="Background" TargetName="markGrid" Value="#3076C1"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="white"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--带水印ComboBox样式-->
    <Style x:Key="WatermarkComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="MaxDropDownHeight" Value="120"/>
        <Setter Property="IsDropDownOpen" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="IsEditable" Value="True"/>
        <Setter Property="Foreground" Value="#333333"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
                        <ToggleButton Grid.Column="2" Template="{DynamicResource WatermarkComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                        <ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

                        <!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
                        <!--<TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>-->
                        <local:SJTextBox  x:Name="PART_EditableTextBox" Style="{DynamicResource WaterMarkTextBox}" HorizontalAlignment="Left" Margin="0,3,23,3" WaterRemark="请输入手机号或邮箱" IsPasswordBox="False" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}" BorderThickness="0"/>
                        <!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the WatermarkComboBoxToggleButton -->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" VerticalOffset="1" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="White" BorderBrush="#999999" BorderThickness="1"/>
                                <ScrollViewer Margin="2,4,2,1">
                                    <!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- This forces the DropDown to have a minimum size if it is empty -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="IsOpen" Value="False" TargetName="Popup"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
                            <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="WatermarkComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="30"/>
            </Grid.ColumnDefinitions>
            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="4" RadiusY="4" Fill="White" Stroke="Gray"/>
            <Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="4" RadiusY="4" Fill="Transparent" Stroke="{x:Null}"/>
            <Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="#999999" Data="M 0 0 L 6 6 L 12 0 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" Value="White" TargetName="Rectangle"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" Value="#F4F4F4" TargetName="Rectangle"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="20"/>
            </Grid.ColumnDefinitions>
            <!--设置圆角-->
            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Fill="White" Stroke="#E1E1E1"/>
            <Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="4" RadiusY="4" Fill="Transparent" Stroke="{x:Null}"/>
            <Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="#999999" Data="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" Value="White" TargetName="Rectangle"/>
                <Setter Property="Stroke" Value="SkyBlue" TargetName="Rectangle"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" Value="#F0F0F0" TargetName="Rectangle"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <!-- This must be named as PART_ContentHost -->
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
    </ControlTemplate>
    <!--不带水印ComboBox样式-->
    <Style x:Key="SimpleComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="MaxDropDownHeight" Value="120"/>
        <Setter Property="IsDropDownOpen" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
                        <ToggleButton Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                        <ContentPresenter HorizontalAlignment="Left" Margin="10,3,16,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

                        <!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
                        <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="10,3,16,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="{TemplateBinding Background}" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" VerticalOffset="1" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="White" BorderBrush="#999999" BorderThickness="1"/>
                                <ScrollViewer Margin="2,4,2,1">
                                    <!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- This forces the DropDown to have a minimum size if it is empty -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="26" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
                            <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#F0F0F0"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ActivityComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="MaxDropDownHeight" Value="120"/>
        <Setter Property="IsDropDownOpen" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton  Template="{StaticResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                        <ContentPresenter HorizontalAlignment="Left" Margin="10,3,16,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectedItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

                            <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="10,3,16,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="{TemplateBinding Background}" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" VerticalOffset="1" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="White" BorderBrush="#999999" BorderThickness="1"/>
                                <ScrollViewer Margin="2,4,2,1">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="26" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
                            <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#F0F0F0"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HourVoteComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="MaxDropDownHeight" Value="120"/>
        <Setter Property="IsDropDownOpen" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton  Template="{StaticResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                        <TextBlock HorizontalAlignment="Left" Margin="10,3,16,3" x:Name="ContentSite" VerticalAlignment="Center" Text="{Binding HourSelected}" IsHitTestVisible="False"/>
                        <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="10,3,16,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="{TemplateBinding Background}" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" VerticalOffset="1" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="White" BorderBrush="#999999" BorderThickness="1"/>
                                <ScrollViewer Margin="2,4,2,1">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="26" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
                            <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#F0F0F0"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MinuteVoteComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="MaxDropDownHeight" Value="120"/>
        <Setter Property="IsDropDownOpen" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton  Template="{StaticResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                        <TextBlock HorizontalAlignment="Left" Margin="10,3,16,3" x:Name="ContentSite" VerticalAlignment="Center" Text="{Binding MinuteSelected}" IsHitTestVisible="False"/>
                        <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="10,3,16,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="{TemplateBinding Background}" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" VerticalOffset="1" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="White" BorderBrush="#999999" BorderThickness="1"/>
                                <ScrollViewer Margin="2,4,2,1">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="26" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
                            <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#F0F0F0"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--系统设置按钮-->
    <Style x:Key="SystemSettingButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle">
                            <Rectangle.Fill>
                                <ImageBrush x:Name="ChildBackImage" ImageSource="pack://application:,,,/AntennaChat;Component/Images/设置-1.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/设置-2.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/设置-1.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--消息按钮-->
    <Style x:Key="MessageRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <Border x:Name="bd"  HorizontalAlignment="Center" CornerRadius="0">
                            <Border.Background>
                                <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/消息-icon-01.png"/>
                            </Border.Background>
                            <ContentPresenter Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="bd" Property="Background" Value="gray" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="bd" Property="Background">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/消息-icon-02.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="bd" Property="Background">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/消息-icon-02.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--联系人按钮-->
    <Style x:Key="LinkManRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <Border x:Name="bd"  HorizontalAlignment="Center" CornerRadius="0">
                            <Border.Background>
                                <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/联系人-01.png"/>
                            </Border.Background>
                            <ContentPresenter Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="bd" Property="Background" Value="gray" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="bd" Property="Background">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/联系人-02.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="bd" Property="Background">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/联系人-02.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--讨论组按钮-->
    <Style x:Key="GroupRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <Border x:Name="bd"  HorizontalAlignment="Center" CornerRadius="0">
                            <Border.Background>
                                <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/群组-icon--01.png"/>
                            </Border.Background>
                            <ContentPresenter Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="bd" Property="Background" Value="gray" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="bd" Property="Background">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/群组-icon--02.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="bd" Property="Background">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/MenuImages/群组-icon--02.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VoteRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="#F4F4F4"/>
        <!--<Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>-->
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Ellipse Height="12" Width="12" x:Name="ellipse" Stroke="#cccccc" Margin="5,0" HorizontalAlignment="Center" SnapsToDevicePixels="True"/>
                        <Path x:Name="path" Height="6" Visibility="Collapsed" Width="6" Data="M87.928584,72.395207 C87.928584,71.842922 87.414693,72.320704 87.966978,72.320704 L108.14356,29.457372 C108.69584,29.457372 125.0012,30.756833 125.0012,31.309118 L95.287686,93.797494 C95.287686,94.349779 95.801577,93.871997 95.249292,93.871997 L54.858303,76.932731 C54.306019,76.932731 58.144127,60.942163 58.144127,60.389879 z"  Stretch="Fill" Fill="White" StrokeThickness="0"/>
                        <ContentPresenter Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>-->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="ellipse" Value="#1991ed"/>
                            <Setter Property="Stroke" TargetName="ellipse" Value="#1991ed"/>
                            <Setter Property="Visibility" TargetName="path" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--首页按钮-->
    <Style x:Key="homePage" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Rectangle x:Name="rectClose" Width="28" Height="20" Fill="Transparent" Stroke="#E1E1DE"></Rectangle>
                        <!--按钮内容-->
                        <Grid>
                            <Canvas HorizontalAlignment="Center" VerticalAlignment="Center" Width="14" Height="10" Margin="7">
                                <Line StrokeThickness="0.5" x:Name="line1" Stroke="#969999" X1="4" Y1="0" X2="4" Y2="10"></Line>
                                <Line StrokeThickness="0.5" x:Name="line2" Stroke="#969999" X1="7" Y1="5" X2="14" Y2="10"></Line>
                                <Line StrokeThickness="0.5" x:Name="line3" Stroke="#969999" X1="7" Y1="5" X2="14" Y2="0"></Line>
                            </Canvas>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsMouseOver"  Value="True">
                            <Setter Property="Opacity" Value="1" />
                            <Setter TargetName="rectClose" Property="Fill" Value="White"/>
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter TargetName="rectClose" Property="Fill" Value="#E0E3E2"/>
                        </Trigger>
                        <Trigger Property="Button.IsEnabled"  Value="False">
                            <Setter Property="Opacity" Value="1" />
                            <Setter TargetName="line1" Property="Stroke" Value="#CECCBE"/>
                            <Setter TargetName="line2" Property="Stroke" Value="#CECCBE"/>
                            <Setter TargetName="line3" Property="Stroke" Value="#CECCBE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--末页按钮-->
    <Style x:Key="lastPage" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Rectangle x:Name="rectClose" Width="28" Height="20" Fill="Transparent" Stroke="#E1E1DE"></Rectangle>
                        <!--按钮内容-->
                        <Grid>
                            <Canvas HorizontalAlignment="Center" VerticalAlignment="Center" Width="14" Height="10" Margin="7">
                                <Line StrokeThickness="0.5" x:Name="line1" Stroke="#969999" X1="10" Y1="0" X2="10" Y2="10"></Line>
                                <Line StrokeThickness="0.5" x:Name="line2" Stroke="#969999" X1="7" Y1="5" X2="0" Y2="0"></Line>
                                <Line StrokeThickness="0.5" x:Name="line3" Stroke="#969999" X1="7" Y1="5" X2="0" Y2="10"></Line>
                            </Canvas>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsMouseOver"  Value="True">
                            <Setter Property="Opacity" Value="1" />
                            <Setter TargetName="rectClose" Property="Fill" Value="White"/>
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter TargetName="rectClose" Property="Fill" Value="#E0E3E2"/>
                        </Trigger>
                        <Trigger Property="Button.IsEnabled"  Value="False">
                            <Setter Property="Opacity" Value="1" />
                            <Setter TargetName="line1" Property="Stroke" Value="#CECCBE"/>
                            <Setter TargetName="line2" Property="Stroke" Value="#CECCBE"/>
                            <Setter TargetName="line3" Property="Stroke" Value="#CECCBE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--上一页按钮-->
    <Style x:Key="prePage" TargetType="Button">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                    <Grid>
                        <Rectangle x:Name="rectClose" Width="28" Height="20" Fill="Transparent" StrokeThickness="0" Stroke="#E1E1DE"></Rectangle>
                        <!--按钮内容-->
                        <Grid>
                            <Canvas HorizontalAlignment="Center" VerticalAlignment="Center" Width="14" Height="10" Margin="7">
                                <Line StrokeThickness="0.5" x:Name="line1" Stroke="#969999" X1="4" Y1="5" X2="11" Y2="10"></Line>
                                <Line StrokeThickness="0.5" x:Name="line2" Stroke="#969999" X1="4" Y1="5" X2="11" Y2="0"></Line>
                            </Canvas>
                        </Grid>
                    </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsMouseOver"  Value="True">
                            <Setter Property="Opacity" Value="1" />
                            <Setter TargetName="rectClose" Property="Fill" Value="White"/>
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter TargetName="rectClose" Property="Fill" Value="#E0E3E2"/>
                        </Trigger>
                        <Trigger Property="Button.IsEnabled"  Value="False">
                            <Setter Property="Opacity" Value="1" />
                            <Setter TargetName="line1" Property="Stroke" Value="#CECCBE"/>
                            <Setter TargetName="line2" Property="Stroke" Value="#CECCBE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--下一页按钮-->
    <Style x:Key="nextPage" TargetType="Button">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                        <Rectangle x:Name="rectClose" Width="28" StrokeThickness="0" Height="20" Fill="Transparent" Stroke="#E1E1DE"></Rectangle>
                        <!--按钮内容-->
                        <Grid>
                            <Canvas HorizontalAlignment="Center" VerticalAlignment="Center" Width="14" Height="10" Margin="7">
                                <Line StrokeThickness="0.5" x:Name="line1" Stroke="#969999" X1="10" Y1="5" X2="3" Y2="10"></Line>
                                <Line StrokeThickness="0.5" x:Name="line2" Stroke="#969999" X1="10" Y1="5" X2="3" Y2="0"></Line>
                            </Canvas>
                        </Grid>
                    </Grid>
                        </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsMouseOver"  Value="True">
                            <Setter Property="Opacity" Value="1" />
                            <Setter TargetName="rectClose" Property="Fill" Value="White"/>
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter TargetName="rectClose" Property="Fill" Value="#E0E3E2"/>
                        </Trigger>
                        <Trigger Property="Button.IsEnabled"  Value="False">
                            <Setter Property="Opacity" Value="1" />
                            <Setter TargetName="line1" Property="Stroke" Value="#CECCBE"/>
                            <Setter TargetName="line2" Property="Stroke" Value="#CECCBE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--图片查看器相关按钮-->
    <Style x:Key="SavePicButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle">
                            <Rectangle.Fill>
                                <ImageBrush x:Name="ChildBackImage" ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/保存-1.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/保存-2.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/保存-1.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PrePicButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" Height="30" Width="30">
                            <Rectangle.Fill>
                                <ImageBrush x:Name="ChildBackImage" ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/上一张-1.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/上一张-2.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Margin" TargetName="rectangle" Value="4,4,0,0">
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/上一张-2.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NextPicButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" Height="30" Width="30">
                            <Rectangle.Fill>
                                <ImageBrush x:Name="ChildBackImage" ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/下一张-1.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/下一张-2.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Margin" TargetName="rectangle" Value="4,4,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/下一张-2.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RotatePicButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle">
                            <Rectangle.Fill>
                                <ImageBrush x:Name="ChildBackImage" ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/旋转-1.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/旋转-2.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/旋转-1.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PicCloseButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle">
                            <Rectangle.Fill>
                                <ImageBrush x:Name="ChildBackImage" ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/关闭-1-查看图片.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/关闭-2-查看图片.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/PictureViewer/关闭-1-查看图片.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TreeViewItem默认样式-->
    <Style  x:Key="DefaultTreeViewItem" TargetType="{x:Type TreeViewItem}">
        <Setter Property="MinHeight" Value="25" />
        <!--<Setter Property="Foreground" Value="{StaticResource TextForeground}" />-->
        <!--<Setter Property="Background" Value="Transparent" />-->
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel>
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
                                MinHeight="{TemplateBinding MinHeight}" UseLayoutRounding="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <!--多层级间隔，暂缓-->
                            <!--<Grid Margin="{Binding Converter={StaticResource LengthConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"-->
                            <Grid Margin="{TemplateBinding Margin}" VerticalAlignment="Stretch">
                                <!--内容-->
                                <ContentPresenter x:Name="PART_Header"  ContentSource="Header"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="Stretch"
                                                  VerticalAlignment="Stretch" />
                            </Grid>
                        </Border>
                        <ItemsPresenter Margin="0,0,0,0" x:Name="ItemsHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#e4f2fb" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#e4f2fb" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#e4f2fb" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TreeView样式-->
    <Style x:Key="DefaultTreeView" TargetType="{x:Type TreeView}">
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"></Setter>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
        <Setter Property="Background" Value="{StaticResource DisabledControlDarkColor}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultTreeViewItem}"></Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True" IsVirtualizing="True" VirtualizationMode="Recycling" Margin="0"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{Binding BorderBrush}"/>
        <Setter Property="Padding" Value="{Binding  Padding}" />
        <Setter Property="BorderThickness" Value="{Binding BorderThickness}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" Margin="0,0,5,0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#F5F5F5"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="#f0f0f0"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="#f0f0f0"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NullListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" Margin="0,0,5,0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonGroupSearch" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <!--<Ellipse Fill="#FFF4F4F5" HorizontalAlignment="Left" Margin="0,0,0,-0.524" Stroke="Black" Width="20.254"/>-->
                    <Image x:Name="ImageSearch" Width="14" Height="14"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="ImageSearch" Property="Source" Value="{DynamicResource BitmapGroupSearchSelected}"/>
                            <Setter Property="ToolTip" Value="收起群成员搜索框"></Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="ImageSearch" Property="Source" Value="{DynamicResource BitmapGroupSearch}"/>
                            <Setter Property="ToolTip" Value="展开群成员搜索框"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TextBox基本样式-->
    <Style x:Key="SimpleTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="BorderBrush" Value="{Binding BorderBrush}"/>
        <Setter Property="Padding" Value="{Binding  Padding}" />
        <Setter Property="BorderThickness" Value="{Binding BorderThickness}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="MinWidth" Value="45"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}"  CornerRadius="1" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <ScrollViewer Margin="2,0,0,0" x:Name="PART_ContentHost" Style="{DynamicResource ScrollViewerStyle}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#FF47AECF" TargetName="Border"/>
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <StackPanel Background="{TemplateBinding Background}" SnapsToDevicePixels="true" HorizontalAlignment="Left">
                        <ToggleButton x:Name="HeaderSite" Margin="10,0,0,0"   
                          ContentTemplate="{TemplateBinding HeaderTemplate}"   
                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"  
                          Content="{TemplateBinding Header}"    
                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"                                    
                          Style="{DynamicResource ToggleButtonStyle}" />

                        <Border x:Name="ExpandSite"  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"   
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"                              
                      Visibility="Collapsed"   
                     
                      Focusable="false"  
                      BorderBrush="{TemplateBinding BorderBrush}"  
                      BorderThickness="{TemplateBinding BorderThickness}"   
                      Width="{Binding ElementName=HeaderSite,Path=Width}"  
                      >
                            <ContentPresenter     
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"   
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>

                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="270"/>
        <Setter Property="Height" Value="30" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5 5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <StackPanel Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"   
                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Orientation="Horizontal">
                        <Grid x:Name="grid" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Grid.RenderTransform>
                            <Rectangle Fill="#FF40BE48" Stroke="{x:Null}" StrokeThickness="0" Opacity="0" Margin="4.684,3.979,6.378,5.834" RadiusY="0" Height="Auto" VerticalAlignment="Stretch"/>


                            <Path x:Name="path2"  Data="M5.8980706,13.542352 L5.91944,9.2570016 5.91944,5.0607715 14.98006,7.7725167 19.931856,9.2545357 15.319199,10.591652 z" Height="10"  Stretch="Fill" Fill="#FFB3B3B3"  Width="8"/>
                        </Grid>

                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"   
                     Margin="{TemplateBinding Padding}"   
                     RecognizesAccessKey="True"   
                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"   
                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="RenderTransform" TargetName="grid">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="90"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoginStateBtnStyle" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <!--按钮内容-->
                        <Grid>
                            <Path x:Name="CollapsedArrow"  HorizontalAlignment="Right" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z">
                                <Path.Fill>
                                    <SolidColorBrush Color="White" />
                                </Path.Fill>
                            </Path>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--白色背景按钮样式-->
    <Style TargetType="{x:Type Button}" x:Key="btnForgetStyle">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="#666666"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <!--<Border Name="border" CornerRadius="2"  Background="{TemplateBinding Background}" BorderBrush="#f0f0f0" BorderThickness="1">-->
                    <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    <!--</Border>-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Foreground" Value="#1991ed"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--下拉按钮-->
    <Style TargetType="ToggleButton" x:Key="ComboxStyleBtn">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <!--<Border x:Name="Back" Background="#F7FDF7" BorderThickness="1" BorderBrush="Transparent">-->
                    <Path Name="PathFill" Fill="#cccccc" Width="8" Height="6" StrokeThickness="0" Data="M5,0 L10,10 L0,10 z" RenderTransformOrigin="0.5,0.5" Stretch="Fill">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform Angle="180"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                    <!--</Border>-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter TargetName="PathFill" Property="Fill" Value="White"></Setter>-->
                            <!--<Setter TargetName="Back" Property="Background" Value="#59CA4F"></Setter>
                            <Setter TargetName="Back" Property="BorderBrush" Value="#59CA4F"></Setter>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Combox-->
    <Style TargetType="ComboBox" x:Key="ComboBoxStyle">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <!--ComBoxItem-->
                <Style TargetType="ComboBoxItem">

                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ComboBoxItem">
                                <Border Name="Back" Background="Transparent"  BorderThickness="0,0,0,0" BorderBrush="#81D779" >
                                    <ContentPresenter ContentSource="{Binding Source}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0"></ContentPresenter>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="Back" Property="Background" Value="LightGray"></Setter>
                                    </Trigger>
                                    <Trigger Property="IsHighlighted" Value="True">
                                        <Setter TargetName="Back" Property="Background" Value="LightGray"></Setter>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="0.7*"/>
                            <ColumnDefinition Width="0.3*" MaxWidth="30"/>
                        </Grid.ColumnDefinitions>
                        <TextBox  Grid.Column="0" IsReadOnly="True" Text="{TemplateBinding Text}" VerticalAlignment="Center" TextAlignment="Center" Height="20" BorderThickness="0" Margin="5,5,0,0"></TextBox>

                        <Border Grid.Column="1"  CornerRadius="0,1,1,0">
                            <ToggleButton Style="{StaticResource ComboxStyleBtn}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"></ToggleButton>
                        </Border>
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <Border CornerRadius="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border.Effect>
                                    <DropShadowEffect Color="Black" BlurRadius="2" ShadowDepth="0" Opacity="0.5"/>
                                </Border.Effect>
                                <ScrollViewer Margin="4,6,4,6" Style="{DynamicResource ScrollViewerStyle}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                    <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="White"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="textBoxMobileWater" TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">

                    <TextBox x:Name="txtSetPwd" BorderThickness="0" Text="{Binding textMobileNum,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  Margin="5,0,0,0" VerticalAlignment="Center"  FontSize="14" MaxLength="11">
                            <TextBox.Resources>
                                <VisualBrush x:Key="HelpBrush" TileMode="None" Opacity="0.3" Stretch="None" AlignmentX="Left">
                                    <VisualBrush.Visual>
                                        <TextBlock Text="请输入手机号" Foreground="#999999" FontSize="14"/>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </TextBox.Resources>
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Style.Triggers>
                                        <Trigger Property="Text" Value="{x:Null}">
                                            <Setter Property="Background" Value="{StaticResource HelpBrush}"/>
                                            <Setter Property="FontSize" Value="14"></Setter>
                                        </Trigger>
                                        <Trigger Property="Text" Value="">
                                            <Setter Property="Background" Value="{StaticResource HelpBrush}"/>
                                            <Setter Property="FontSize" Value="14"></Setter>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                   
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!---->
    <Style x:Key="textBoxPhone" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="40"></Setter>
        <Setter Property="Width" Value="240"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                   <Border BorderThickness="1" BorderBrush="#cccccc" CornerRadius="2">
                   <StackPanel Orientation="Horizontal">
                       <ComboBox x:Name="Pre" Text="+86" Width="80" BorderThickness="0" Style="{StaticResource ResourceKey=ComboBoxStyle}" VerticalAlignment="Center" FontSize="14" FontFamily="微软雅黑">
                           <ComboBoxItem IsSelected="True">+86</ComboBoxItem>
                       </ComboBox>
                       <Path  Data="M169.33333,71 C169.33333,109.66667 169.33333,109.83333 169.33333,109.83333" Fill="#cccccc" HorizontalAlignment="Right"   Height="25" Stretch="Fill" Stroke="#cccccc"  Width="1"/>
                       <TextBox x:Name="textBoxTelNumber" Style="{StaticResource textBoxMobileWater}" Width="154" VerticalAlignment="Center"  MaxLength="11" FontSize="14"></TextBox>
                   </StackPanel>
                       </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="textBoxCode" TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                   <Border BorderThickness="1" BorderBrush="#cccccc" CornerRadius="2">
                       <StackPanel Orientation="Horizontal">
                           <TextBox x:Name="txtCode" Text="{Binding textCode,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" BorderThickness="0" Margin="5,0,0,0" VerticalAlignment="Center" Width="147" FontSize="14">
                              <TextBox.Resources>
                        <VisualBrush x:Key="HelpBrush" TileMode="None" Opacity="0.3" Stretch="None" AlignmentX="Left">
                            <VisualBrush.Visual>
                                <TextBlock Text="请输入验证码" Foreground="#999999" FontSize="14"/>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </TextBox.Resources>
                               <TextBox.Style>
                        <Style TargetType="TextBox">
                            <Style.Triggers>
                                <Trigger Property="Text" Value="{x:Null}">
                                    <Setter Property="Background" Value="{StaticResource HelpBrush}"/>
                                    <Setter Property="FontSize" Value="14"></Setter>
                                </Trigger>
                                <Trigger Property="Text" Value="">
                                    <Setter Property="Background" Value="{StaticResource HelpBrush}"/>
                                    <Setter Property="FontSize" Value="14"></Setter>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                           </TextBox>
                           <Path  Data="M169.33333,71 C169.33333,109.66667 169.33333,109.83333 169.33333,109.83333" Fill="#cccccc" HorizontalAlignment="Right"   Height="25" Stretch="Fill" Stroke="#cccccc"  Width="1"/>
                           <Button x:Name="btnBlockGetCode" Command="{Binding btnCommandGetCodeValue}" Style="{StaticResource btnForgetStyle}" Content="{Binding setBtnText}" BorderThickness="0" Background="White" Foreground="#1991ed" Width="87" FontSize="14" VerticalAlignment="Center" Margin="0,0,0,0" Cursor="Hand"></Button>
                       </StackPanel>
                       </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="textBoxSetPwdFirst" TargetType="{x:Type PasswordBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                   <Border BorderThickness="1" BorderBrush="#cccccc" CornerRadius="2">
                               <PasswordBox x:Name="txtSetPwd" Password="{Binding hello}"  BorderThickness="0" Margin="5,0,0,0"  VerticalAlignment="Center"  FontSize="14">
                              <PasswordBox.Resources>
                        <VisualBrush x:Key="HelpBrush" TileMode="None" Opacity="0.3" Stretch="None" AlignmentX="Left">
                            <VisualBrush.Visual>
                                <TextBlock Text="设置密码" Foreground="#999999" FontSize="14"/>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </PasswordBox.Resources>
                               <PasswordBox.Style>
                        <Style TargetType="TextBox">
                            <Style.Triggers>
                                <Trigger Property="Text" Value="{x:Null}">
                                    <Setter Property="Background" Value="{StaticResource HelpBrush}"/>
                                    <Setter Property="FontSize" Value="14"></Setter>
                                </Trigger>
                                <Trigger Property="Text" Value="">
                                    <Setter Property="Background" Value="{StaticResource HelpBrush}"/>
                                    <Setter Property="FontSize" Value="14"></Setter>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </PasswordBox.Style>
                           </PasswordBox>
                       </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--挂断-->
    <Style x:Key="BtnHangupStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="40"></Setter>
        <Setter Property="Height" Value="40"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapHangup}" Stretch="Fill"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapHangup_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapHangup}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--接听-->
    <Style x:Key="BtnAcceptStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="40"></Setter>
        <Setter Property="Height" Value="40"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapAccept}" Stretch="Fill"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapAccept_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapAccept}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--麦克风静音开-->
    <Style x:Key="BtnMuteOpenStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="40"></Setter>
        <Setter Property="Height" Value="40"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapMute_Open}" Stretch="Fill"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapMute_Open_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapMute_Open}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--麦克风静音关-->
    <Style x:Key="BtnMuteCloseStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="40"></Setter>
        <Setter Property="Height" Value="40"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapMute_Close}" Stretch="Fill"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapMute_Close_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapMute_Close}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--耳机静音关-->
    <Style x:Key="BtnPlayMuteCloseStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="40"></Setter>
        <Setter Property="Height" Value="40"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapPlayMute_Close}" Stretch="Fill"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapPlayMute_Close_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapPlayMute_Close}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--耳机静音开-->
    <Style x:Key="BtnPlayMuteOpenStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="40"></Setter>
        <Setter Property="Height" Value="40"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapPlayMute_Open}" Stretch="Fill"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapPlayMute_Open_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapPlayMute_Open}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SimpleSlider" TargetType="{x:Type Slider}">
        <Setter Property="Background" Value="#CDCDCD"/>
        <Setter Property="BorderBrush" Value="#CDCDCD"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <!-- TickBar shows the ticks for Slider -->
                        <TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top"/>
                        <Border Grid.Row="1" Margin="0" x:Name="Border" Height="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
                        <!-- The Track lays out the repeat buttons and thumb -->
                        <Track Grid.Row="1" x:Name="PART_Track">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleSliderThumb}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <!-- Use a rotation to create a Vertical Slider form the default Horizontal -->
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <!-- Track rotates itself based on orientation so need to force it back -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Simple Simple SliderThumb - The Thumb is the draggable part of a Slider-->
    <Style x:Key="SimpleSliderThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Height" Value="8"/>
        <Setter Property="Width" Value="8"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Ellipse x:Name="Ellipse" Fill="#1A91ED"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" Value="#6CBAF6" TargetName="Ellipse"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" Value="#6CBAF6" TargetName="Ellipse"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Simple ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
    <Style x:Key="SimpleScrollRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>