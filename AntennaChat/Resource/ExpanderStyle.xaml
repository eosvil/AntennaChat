<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                     xmlns:local="clr-namespace:AntennaChat.Resource">
    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
    <Color x:Key="ControlColor">#FFFFFF</Color>
    <Color x:Key="ControlMouseOverColor">#BFDAC9</Color>
    <Color x:Key="ControlPressedColor">#BFDAC9</Color>
    <Color x:Key="GlyphColor">#7A8792</Color>
    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Border x:Name="Border">
            <Border.Background >
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="{DynamicResource ControlColor}"  />
                    <GradientStop Color="{DynamicResource ControlColor}"  Offset="0" />
                </LinearGradientBrush>
            </Border.Background>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"  Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <EasingColorKeyFrame KeyTime="0"  Value="#f0f0f0" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="#f0f0f0"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CollapsedArrow">
                                <DiscreteObjectKeyFrame KeyTime="0"   Value="{x:Static Visibility.Hidden}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ExpandededArrow">
                                <DiscreteObjectKeyFrame KeyTime="0"  Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Indeterminate" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition  Width="auto"/>
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Path x:Name="CollapsedArrow" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Left" VerticalAlignment="Center" Data="M 0 0 L 0 8 L 7 4 Z" Margin="{TemplateBinding Padding}" />
                <Path x:Name="ExpandededArrow"  HorizontalAlignment="Left" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" Visibility="Collapsed" Data="M 0 0 L 8 0 L 4 7 Z" Margin="{TemplateBinding Padding}"/>
                <Label Grid.Column="1" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}"  VerticalAlignment="Center"   Margin ="5,0,0,0"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <Style x:Key="ExpanderHeaderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">

                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="ContentRow"  Height="0" />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"  Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlDarkColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"  Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledBorderLightColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border"  Grid.Row="0"   BorderThickness="0,0,0,0">
                            <Border.BorderBrush>
                                <LinearGradientBrush >
                                    <GradientStop Color="White"  />
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <Grid >
                                <Grid.Style >
                                    <Style  TargetType="Grid">
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="true">
                                                <Setter Property="Background" Value="#E9ECF1" ></Setter>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="false">
                                                <Setter Property="Background" Value="#FFFFFF"></Setter>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>

                                <ToggleButton  x:Name="toggleButton" OverridesDefaultStyle="True" Template="{StaticResource ExpanderToggleButton}" 
                                        IsChecked="{Binding IsExpanded, Mode=TwoWay,  RelativeSource={RelativeSource TemplatedParent}}"  Padding="{TemplateBinding Padding}"
                                              Content="{TemplateBinding Header}" Tag="{TemplateBinding Tag}"  Foreground="{TemplateBinding Foreground}"  FontSize="{TemplateBinding FontSize}" Height="32" >
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseRightButtonDown">
                                            <i:InvokeCommandAction Command="{Binding ContactDepartItemCommand}" CommandParameter="{Binding ElementName=toggleButton,Path=Tag}"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="PreviewMouseDown">
                                            <i:InvokeCommandAction Command="{Binding DepartItemCommand}" CommandParameter="{Binding ElementName=toggleButton,Path=Tag}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ToggleButton>
                            </Grid>
                        </Border>
                        <Border x:Name="Content" Grid.Row="1"  BorderThickness="0" >
                            <ContentPresenter Margin="0" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding Height, ElementName=Content}" />
                            <Setter TargetName="toggleButton" Property="Foreground" Value="#1991ED" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="FirstLevelExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Border x:Name="Border"  >
            <Border.Background >
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="{DynamicResource ControlColor}"  />
                    <GradientStop Color="{DynamicResource ControlColor}"  Offset="0" />
                </LinearGradientBrush>
            </Border.Background>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"  Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <EasingColorKeyFrame KeyTime="0"  Value="#f0f0f0" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="#f0f0f0"  />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CollapsedArrow">
                                <DiscreteObjectKeyFrame KeyTime="0"   Value="{x:Static Visibility.Hidden}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ExpandededArrow">
                                <DiscreteObjectKeyFrame KeyTime="0"  Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" >
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CollapsedArrow">
                                <DiscreteObjectKeyFrame KeyTime="0"   Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ExpandededArrow">
                                <DiscreteObjectKeyFrame KeyTime="0"  Value="{x:Static Visibility.Hidden}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>

                    <VisualState x:Name="Indeterminate" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition  Width="auto"/>
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Image x:Name="ExpandededArrow"    HorizontalAlignment="Left" VerticalAlignment="Center"   Width="14" Height="14" Margin="{TemplateBinding Padding}" Source="pack://application:,,,/AntennaChat;Component/Images/联系人-展开.png"/>
                <Image x:Name="CollapsedArrow"   HorizontalAlignment="Left" VerticalAlignment="Center"    Width="14" Height="14" Margin="{TemplateBinding Padding}" Source="pack://application:,,,/AntennaChat;Component/Images/收缩.png"/>
                <!--<Path x:Name="CollapsedArrow" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Left" VerticalAlignment="Center" Data="M 0 0 L 0 8 L 7 4 Z" Margin="{TemplateBinding Padding}" />
                <Path x:Name="ExpandededArrow"  HorizontalAlignment="Left" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" Visibility="Collapsed" Data="M 0 0 L 8 0 L 4 7 Z" Margin="{TemplateBinding Padding}"/>-->
                <Label x:Name="lblContent" Grid.Column="1" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}"  VerticalAlignment="Center"   Margin ="5,0,0,0"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <Style x:Key="FirstLevelExpanderHeaderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">

                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="ContentRow"  Height="0" />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"  Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlDarkColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"  Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledBorderLightColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border"  Grid.Row="0"   BorderThickness="0,0,0,0"  >
                            <Border.BorderBrush>
                                <LinearGradientBrush >
                                    <GradientStop Color="White"  />
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <Grid >
                                <Grid.Style >
                                    <Style  TargetType="Grid">
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="true">
                                                <Setter Property="Background" Value="#E9ECF1" ></Setter>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="false">
                                                <Setter Property="Background" Value="#FFFFFF"></Setter>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>

                                <ToggleButton x:Name="toggleButton" OverridesDefaultStyle="True" Template="{StaticResource FirstLevelExpanderToggleButton}" 
                                        IsChecked="{Binding IsExpanded, Mode=TwoWay,  RelativeSource={RelativeSource TemplatedParent}}"  Padding="{TemplateBinding Padding}"
                                              Content="{TemplateBinding Header}" Tag="{TemplateBinding Tag}"  Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" Height="32" >
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseRightButtonDown">
                                            <i:InvokeCommandAction Command="{Binding ContactDepartItemCommand}" CommandParameter="{Binding ElementName=toggleButton,Path=Tag}"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="PreviewMouseDown">
                                            <i:InvokeCommandAction Command="{Binding CompanyItemComand}" CommandParameter="{Binding ElementName=toggleButton,Path=Tag}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ToggleButton>
                            </Grid>
                        </Border>
                        <Border x:Name="Content" Grid.Row="1"  BorderThickness="0" >
                            <ContentPresenter Margin="0" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding Height, ElementName=Content}" />
                            <Setter TargetName="toggleButton" Property="Foreground" Value="#1991ED" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>