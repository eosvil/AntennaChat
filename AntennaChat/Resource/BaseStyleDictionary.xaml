<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:AntennaChat.Resource"
                    xmlns:c="clr-namespace:AntennaChat.ViewModel"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <!--带阴影边框的窗体 宽、高应当比设计的分别加10-->
    <Style x:Key="noresize_window" TargetType="{x:Type Window}">
        <Setter Property="ResizeMode" Value="CanMinimize"/>
        <Setter Property="AllowsTransparency" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Margin="5">
                        <Rectangle Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"  
                               RadiusX="4" RadiusY="4">
                            <Rectangle.Effect>
                                <DropShadowEffect BlurRadius="8" ShadowDepth="0" Color="#E5E5E5"/>
                            </Rectangle.Effect>
                        </Rectangle>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Margin}"  
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" CornerRadius="4">
                            <ContentPresenter />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--加载等待-->
    <Style x:Key="ChasingDotsProgressRingStyle" TargetType="local:ModernProgressRing">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="MinWidth" Value="32" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ModernProgressRing">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large"/>
                                <VisualState x:Name="Small" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive" />
                                <VisualState x:Name="Active">
                                    <Storyboard RepeatBehavior="Forever">
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Ring" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressElement1">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:2" Value="1.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressElement1">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:2" Value="1.0" KeySpline="0.42,0 0.58,1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressElement2">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1" Value="1.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:2" Value="0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressElement2">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1" Value="1.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:2" Value="0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="Ring">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="360"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="Ring"
                              Margin="{TemplateBinding Padding}"
                              Visibility="Collapsed"
                              RenderTransformOrigin="0.5,0.5">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="2*"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="2*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="3*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RenderTransform>
                                <RotateTransform />
                            </Grid.RenderTransform>
                            <Ellipse x:Name="ProgressElement1" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform />
                                </Ellipse.RenderTransform>
                            </Ellipse>
                            <Ellipse x:Name="ProgressElement2" Grid.Row="1" Grid.RowSpan="2" Grid.Column="1" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform />
                                </Ellipse.RenderTransform>
                            </Ellipse>

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border SnapsToDevicePixels="true"  BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--消息发送中的等待动画-->
    <Style x:Key="CircleProgressRingStyle" TargetType="local:ModernProgressRing">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="18" />
        <Setter Property="MinWidth" Value="18" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ModernProgressRing">

                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <Border.Resources>
                            <Style x:Key="ProgressRingEllipseStyle" TargetType="Ellipse">
                                <Setter Property="Opacity" Value="0" />
                                <Setter Property="HorizontalAlignment" Value="Left" />
                                <Setter Property="VerticalAlignment" Value="Top" />
                            </Style>
                        </Border.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large"/>
                                <VisualState x:Name="Small" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive" />
                                <VisualState x:Name="Active">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Ring" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressElement1">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressElement1">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.100" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressElement2">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.100" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressElement2">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.200" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressElement3">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.200" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressElement3">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.300" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressElement4">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.300" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressElement4">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.400" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressElement5">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.400" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressElement5">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.500" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressElement6">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.500" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressElement6">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.600" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressElement7">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.600" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressElement7">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.700" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="ProgressElement8">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.700" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ProgressElement8">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.0"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.480" Value="2.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.960" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                            <SplineDoubleKeyFrame KeyTime="0:0:1.200" Value="0.0" KeySpline="0.42,0 0.58,1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="Ring"
                              Margin="{TemplateBinding Padding}"
                              Visibility="Collapsed">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*"/>
                                <ColumnDefinition Width="2*"/>
                                <ColumnDefinition Width="7*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="7*"/>
                            </Grid.RowDefinitions>

                            <Border Grid.Row="0" Grid.Column="1" RenderTransformOrigin="0.5,4.0">
                                <Border.RenderTransform>
                                    <RotateTransform Angle="0" />
                                </Border.RenderTransform>

                                <Ellipse x:Name="ProgressElement1"  Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>

                            <Border Grid.Row="0" Grid.Column="1" RenderTransformOrigin="0.5,4.0">
                                <Border.RenderTransform>
                                    <RotateTransform Angle="45" />
                                </Border.RenderTransform>

                                <Ellipse x:Name="ProgressElement2"  Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>

                            <Border Grid.Row="0" Grid.Column="1" RenderTransformOrigin="0.5,4.0">
                                <Border.RenderTransform>
                                    <RotateTransform Angle="90" />
                                </Border.RenderTransform>

                                <Ellipse x:Name="ProgressElement3"  Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>

                            <Border Grid.Row="0" Grid.Column="1" RenderTransformOrigin="0.5,4.0">
                                <Border.RenderTransform>
                                    <RotateTransform Angle="135" />
                                </Border.RenderTransform>

                                <Ellipse x:Name="ProgressElement4"  Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>

                            <Border Grid.Row="0" Grid.Column="1" RenderTransformOrigin="0.5,4.0">
                                <Border.RenderTransform>
                                    <RotateTransform Angle="180" />
                                </Border.RenderTransform>

                                <Ellipse x:Name="ProgressElement5"  Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>

                            <Border Grid.Row="0" Grid.Column="1" RenderTransformOrigin="0.5,4.0">
                                <Border.RenderTransform>
                                    <RotateTransform Angle="225" />
                                </Border.RenderTransform>

                                <Ellipse x:Name="ProgressElement6"  Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>

                            <Border Grid.Row="0" Grid.Column="1" RenderTransformOrigin="0.5,4.0">
                                <Border.RenderTransform>
                                    <RotateTransform Angle="270" />
                                </Border.RenderTransform>

                                <Ellipse x:Name="ProgressElement7"  Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>

                            <Border Grid.Row="0" Grid.Column="1" RenderTransformOrigin="0.5,4.0">
                                <Border.RenderTransform>
                                    <RotateTransform Angle="315" />
                                </Border.RenderTransform>

                                <Ellipse x:Name="ProgressElement8"  Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--在线状态StackPanel-->
    <Style x:Key="StackPanel_Status" TargetType="{x:Type StackPanel}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="Cursor" Value="Hand"/>
        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.Setters>
                    <Setter Property="Background" Value="#2B8CD6"/>
                </Trigger.Setters>
            </Trigger>
        </Style.Triggers>-->
    </Style>
    <!--日期控件-->
    <Style TargetType="{x:Type DatePicker}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#333333" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="VerticalAlignment" Value="Center"/>
        <!--<Setter Property="DisplayDateEnd" Value="{x:Static sys:DateTime.Now}"/>-->
        <Setter Property="Padding" Value="2,2,2,1"/>
        <Setter Property="Focusable" Value="False" />
        <!--<Setter Property="SelectedDate" Value="{x:Static sys:DateTime.Now}"/>-->
        <Setter Property="CalendarStyle">
            <Setter.Value>
                <Style TargetType="Calendar" BasedOn="{StaticResource {x:Type Calendar}}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Calendar">
                                <Grid Name="PART_Root" HorizontalAlignment="Center">
                                    <Border Background="#0C000000" BorderBrush="#0F000000" BorderThickness="1" CornerRadius="2.5" Margin="-1" />
                                    <Border Background="#0A000000" BorderBrush="#0C000000" BorderThickness="1" CornerRadius="2.75" Margin="-2" />
                                    <!--弹出框背景-->
                                    <CalendarItem Name="PART_CalendarItem" Background="White" Style="{TemplateBinding CalendarItemStyle}" BorderThickness="0" Margin="1"/>
                                    <!--弹出框边框-->
                                    <Border BorderBrush="{DynamicResource Accent}" BorderThickness="1" />
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border x:Name="LayoutRoot" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="1"  BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <Grid x:Name="PART_Root" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.Resources>
                                <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
                                    <Grid>
                                        <Rectangle x:Name="rectangle">
                                            <Rectangle.Fill>
                                                <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/日期-1.png"/>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsFocused" Value="True"/>
                                        <Trigger Property="IsDefaulted" Value="True"/>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Fill" TargetName="rectangle">
                                                <Setter.Value>
                                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/日期-2.png"/>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter Property="Fill" TargetName="rectangle">
                                                <Setter.Value>
                                                    <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/日期-1.png"></ImageBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False"/>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Grid.Resources>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_Button" Grid.Column="1" Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="Center" 
                                    VerticalAlignment="Center" Grid.Row="0" Template="{StaticResource DropDownButtonTemplate}" Width="24" Height="24"/>
                            <TextBox BorderThickness="0" Grid.Column="0" Text="{Binding VoteEndDate, StringFormat={}{0:yyyy-MM-dd}}" IsReadOnly="True" VerticalAlignment="Center">
                                <TextBox.Resources>
                                    <VisualBrush x:Key="HelpBrush" TileMode="None" Opacity="0.3" Stretch="None" AlignmentX="Left">
                                        <VisualBrush.Visual>
                                            <TextBlock Text="选择日期" Foreground="#999999" FontSize="16" FontWeight="Bold"/>
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </TextBox.Resources>
                                <TextBox.Style>
                                    <Style TargetType="TextBox">
                                        <Style.Triggers>
                                            <Trigger Property="Text" Value="{x:Null}">
                                                <Setter Property="Background" Value="{StaticResource HelpBrush}"/>
                                                <Setter Property="FontSize" Value="16"></Setter>
                                            </Trigger>
                                            <Trigger Property="Text" Value="">
                                                <Setter Property="Background" Value="{StaticResource HelpBrush}"/>
                                                <Setter Property="FontSize" Value="16"></Setter>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                            <!--<DatePickerTextBox x:Name="PART_TextBox" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="Center" Focusable="{TemplateBinding Focusable}" Grid.Column="0" />-->
                            <Popup x:Name="PART_Popup" PlacementTarget="{Binding ElementName=LayoutRoot}" Placement="Bottom"  StaysOpen="False" AllowsTransparency="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="PART_TextBox" Property="Foreground" Value="{DynamicResource InputTextDisabled}" />
                        </Trigger>-->
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True" SourceName="PART_Button"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter Property="Foreground" Value="#22aeff" TargetName="PART_TextBox"/>-->
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="AcitivityDatePickerStyle" TargetType="{x:Type DatePicker}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#333333" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="2,2,2,1"/>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="CalendarStyle">
            <Setter.Value>
                <Style TargetType="Calendar" BasedOn="{StaticResource {x:Type Calendar}}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Calendar">
                                <Grid Name="PART_Root" HorizontalAlignment="Center">
                                    <Border Background="#0C000000" BorderBrush="#0F000000" BorderThickness="1" CornerRadius="2.5" Margin="-1" />
                                    <Border Background="#0A000000" BorderBrush="#0C000000" BorderThickness="1" CornerRadius="2.75" Margin="-2" />
                                    <!--弹出框背景-->
                                    <CalendarItem Name="PART_CalendarItem" Background="White" Style="{TemplateBinding CalendarItemStyle}" BorderThickness="0" Margin="1"/>
                                    <!--弹出框边框-->
                                    <Border BorderBrush="{DynamicResource Accent}" BorderThickness="1" />
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border x:Name="LayoutRoot" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="1"  BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <Grid x:Name="PART_Root" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center">
                            <Grid.Resources>
                                <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
                                    <Grid Background="White" >
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="34"/>
                                            <ColumnDefinition/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Rectangle  Width="18" Height="18" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Rectangle.Fill>
                                                <ImageBrush ImageSource="pack://application:,,,/AntennaChat;Component/Images/activityDate.png"/>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                        <TextBlock  Grid.Column="1" Text="{Binding ActivityStartDate, StringFormat={}{0:yyyy-MM-dd}}"   VerticalAlignment="Center"/>
                                        <Path Grid.Column="2" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="#999999" Data="M 0 0 L 4 4 L 8 0 Z" Margin="0,0,10,0"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsFocused" Value="True"/>
                                        <Trigger Property="IsDefaulted" Value="True"/>
                                        <Trigger Property="IsEnabled" Value="False"/>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Grid.Resources>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="34" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_Button"  Grid.Column="0" Grid.ColumnSpan="2" Foreground="{TemplateBinding Foreground}" Focusable="False"  Grid.Row="0" Template="{StaticResource DropDownButtonTemplate}"/>
                           
                            <Popup x:Name="PART_Popup" PlacementTarget="{Binding ElementName=LayoutRoot}" Placement="Bottom"  StaysOpen="False" AllowsTransparency="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True" SourceName="PART_Button"/>
                                <Condition SourceName="PART_Button" Property="IsPressed" Value="true"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter   Property="BorderBrush" Value="#22aeff" TargetName="LayoutRoot"/>-->
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AcitivityEndDatePickerStyle" TargetType="{x:Type DatePicker}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#333333" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="2,2,2,1"/>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="CalendarStyle">
            <Setter.Value>
                <Style TargetType="Calendar" BasedOn="{StaticResource {x:Type Calendar}}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Calendar">
                                <Grid Name="PART_Root" HorizontalAlignment="Center">
                                    <Border Background="#0C000000" BorderBrush="#0F000000" BorderThickness="1" CornerRadius="2.5" Margin="-1" />
                                    <Border Background="#0A000000" BorderBrush="#0C000000" BorderThickness="1" CornerRadius="2.75" Margin="-2" />
                                    <!--弹出框背景-->
                                    <CalendarItem Name="PART_CalendarItem" Background="White" Style="{TemplateBinding CalendarItemStyle}" BorderThickness="0" Margin="1"/>
                                    <!--弹出框边框-->
                                    <Border BorderBrush="{DynamicResource Accent}" BorderThickness="1" />
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border x:Name="LayoutRoot" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="1"  BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <Grid x:Name="PART_Root"  VerticalAlignment="Center" >
                            <Grid.Resources>
                                <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
                                    <Grid Background="White" >
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Text="{Binding ActivityEndDate, StringFormat={}{0:yyyy-MM-dd}}"  HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        <Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="#999999" Data="M 0 0 L 4 4 L 8 0 Z" Margin="0,0,10,0"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsFocused" Value="True"/>
                                        <Trigger Property="IsDefaulted" Value="True"/>
                                        <Trigger Property="IsEnabled" Value="False"/>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Grid.Resources>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="34" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_Button"  Grid.Column="0" Grid.ColumnSpan="2" Foreground="{TemplateBinding Foreground}" Focusable="False"  Grid.Row="0" Template="{StaticResource DropDownButtonTemplate}"/>

                            <Popup x:Name="PART_Popup" PlacementTarget="{Binding ElementName=LayoutRoot}" Placement="Bottom"  StaysOpen="False" AllowsTransparency="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="LayoutRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True" SourceName="PART_Button"/>
                                <Condition SourceName="PART_Button" Property="IsPressed" Value="true"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter   Property="BorderBrush" Value="#22aeff" TargetName="LayoutRoot"/>-->
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Foreground" Value="#656565"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DatePickerTextBox">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unwatermarked" />
                                <VisualState Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="PART_Watermark" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border x:Name="Border" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">
                            <Grid x:Name="WatermarkContent"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Border x:Name="ContentElement" BorderThickness="0" Opacity="1" />
                                <Border x:Name="watermark_decorator" BorderThickness="0">
                                    <ContentControl x:Name="PART_Watermark"
                                                    Opacity="0"
                                                    Focusable="False"
                                                    IsHitTestVisible="False"
                                                    Margin="3,0"/>
                                </Border>
                                <ScrollViewer x:Name="PART_ContentHost" 
                                              Margin="0"
                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="PART_Watermark" Property="Foreground" Value="{DynamicResource InputTextDisabled}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="true">
                            <Setter TargetName="PART_Watermark" Property="Foreground" Value="{DynamicResource InputTextDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TabControl样式-->
    <Style x:Key="TabControlStyleLeft" TargetType="{x:Type TabControl}">
        <Setter Property="BorderThickness" Value="1,0,0,0"/>
        <Setter Property="BorderBrush" Value="#eaeff3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition  Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TabPanel Grid.Column="0" Panel.ZIndex="1" Margin="0" IsItemsHost="True" />
                        <Border Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{x:Null}">
                            <ContentPresenter ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TabItem样式-->
    <Style TargetType="{x:Type  TabItem }">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center" x:Name="ContentSite" VerticalAlignment="Center" RecognizesAccessKey="True" ContentSource="Header"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#D2EFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContextMenu}" x:Key="contextMenu">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
        <Setter Property ="Focusable" Value="False"/>
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid Margin="4">
                        <Rectangle Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"  
                            RadiusX="3" RadiusY="3">
                            <Rectangle.Effect>
                                <DropShadowEffect BlurRadius="5" ShadowDepth="0" Color="#FF68AEAE"/>
                            </Rectangle.Effect>
                        </Rectangle>
                        <Border 
                      Name="Border"
                      Background="#FFE6F4F9"
                      BorderBrush="#FF7CCCF9"
                      BorderThickness="1" >
                            <StackPanel IsItemsHost="True"
                        KeyboardNavigation.DirectionalNavigation="Cycle"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3"/>
                            <Setter TargetName="Border" Property="CornerRadius" Value="4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="CheckBoxFillNormal" Color="#F4F4F4"/>
    <Style x:Key="EmptyCheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckRadioFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VoteCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <!--<Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>-->
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Ellipse Height="12" Width="12" x:Name="ellipse" Stroke="#cccccc" Margin="5,0" HorizontalAlignment="Center" SnapsToDevicePixels="True"/>
                        <Path x:Name="path" Height="6" Visibility="Collapsed" Width="6" Data="M87.928584,72.395207 C87.928584,71.842922 88.376299,71.395207 88.928584,71.395207 L108.14356,29.457372 C108.69584,29.457372 125.0012,30.756833 125.0012,31.309118 L97.571501,95.093186 C97.571501,95.645471 97.123786,96.093186 96.571501,96.093186 L54.858303,76.932731 C54.306019,76.932731 58.144127,60.942163 58.144127,60.389879 z"   Stretch="Fill" Fill="White" StrokeThickness="0"/>
                        <ContentPresenter Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="ellipse" Value="#1991ed"/>
                            <Setter Property="Stroke" TargetName="ellipse" Value="#1991ed"/>
                            <Setter Property="Visibility" TargetName="path" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Fill" TargetName="ellipse" Value="Transparent"/>
                            <Setter Property="Stroke" TargetName="ellipse" Value="#cccccc"/>
                            <Setter Property="Visibility" TargetName="path" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToVoteCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <!--<Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>-->
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Ellipse Height="12" Width="12" x:Name="ellipse" Stroke="#cccccc" Margin="5,0" HorizontalAlignment="Center" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        <Ellipse x:Name="path" Height="6" Visibility="Collapsed" Width="6" Margin="0,-1,0,0" StrokeThickness="0" Fill="#1991ed" VerticalAlignment="Center"/>
                        <ContentPresenter Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="ellipse" Value="#fefefe"/>
                            <Setter Property="Stroke" TargetName="ellipse" Value="#1991ed"/>
                            <Setter Property="Visibility" TargetName="path" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Fill" TargetName="ellipse" Value="Transparent"/>
                            <Setter Property="Stroke" TargetName="ellipse" Value="#cccccc"/>
                            <Setter Property="Visibility" TargetName="path" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>