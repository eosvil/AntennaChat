<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:AntennaChat.Resource">

    <Style x:Key="btnAddGroup" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>
        <Setter Property="Margin" Value="0,0,20,0"></Setter>
        <Setter Property="HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapInvitGroupMember}" Stretch="None"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapInvitGroupMember_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapInvitGroupMember_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnNoticeShow" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>
        <Setter Property="Margin" Value="0,0,20,0"></Setter>
        <Setter Property="HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent">
                        <Image Name="ImgBtnBg3" Source="pack://application:,,,/AntennaChat;Component/Images/通知-右上角-默认.png" Stretch="Fill"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/通知-右上角-悬停.png" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/通知-右上角-默认.png" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnImageShowStyle" TargetType="{x:Type Button}">
        <!--<Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>-->
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapFace}"  Height="18" Width="18"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapFace_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapFace_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnCutImageStyle" TargetType="{x:Type Button}">
        <!--<Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>-->
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapCutImg}" Stretch="None"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapCutImg_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapCutImg_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid Margin="5">
                        <Rectangle Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"  
                               RadiusX="2" RadiusY="2">
                            <Rectangle.Effect>
                                <DropShadowEffect BlurRadius="8" ShadowDepth="0" Color="#E5E5E5"/>
                            </Rectangle.Effect>
                        </Rectangle>
                        <Border x:Name="Border" CornerRadius="2" BorderThickness="1" BorderBrush="#cccccc" Background="#ffffff">
                            <ItemsPresenter/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#333333"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border CornerRadius="0">
                        <Border.Background>
                            <SolidColorBrush x:Name="MenuItemAnimatedBrushBackground"  />
                        </Border.Background>
                        <Grid Height="32">
                            <!-- The Grid is used to hold together columns for an Icon, Content, Glyph checkmark and Arrow to show the next level
                             Size sharing is used in Grid so that the Icon, Content, Arrow for each MenuItem align together -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="20" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="14"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock x:Name="txtIcon" Grid.Column="0" Text=" ">
                                <TextBlock.Background>
                                    <SolidColorBrush x:Name="IconAnimatedBrushBackground"   />
                                </TextBlock.Background>
                            </TextBlock>
                            <!-- ContentPresenter to show an Icon if needed -->
                            <ContentPresenter Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon" HorizontalAlignment="Center"/>
                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Visibility="Hidden" Margin="8,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                            </Grid>
                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1" Margin="0,0,20,0" ContentSource="Header" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>
                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" 
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="-3" HorizontalOffset="2">
                                <Grid Margin="5" Name="SubMenu">
                                    <Rectangle Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" RadiusX="2" RadiusY="2">
                                        <Rectangle.Effect>
                                            <DropShadowEffect BlurRadius="8" ShadowDepth="0" Color="#E5E5E5"/>
                                        </Rectangle.Effect>
                                    </Rectangle>
                                    <Border x:Name="SubMenuBorder" CornerRadius="2" BorderThickness="1" BorderBrush="#cccccc" Background="#ffffff">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="MenuItemAnimatedBrushBackground" Storyboard.TargetProperty="Color">
                                            <LinearColorKeyFrame Value="Transparent" KeyTime="00:00:00.0020000" />
                                            <LinearColorKeyFrame Value="#F0F0F0" KeyTime="00:00:00.0320000" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IconAnimatedBrushBackground" Storyboard.TargetProperty="Color">
                                            <LinearColorKeyFrame Value="Transparent" KeyTime="00:00:00.0020000" />
                                            <LinearColorKeyFrame Value="#F0F0F0"  KeyTime="00:00:00.0320000" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="MenuItemAnimatedBrushBackground" Storyboard.TargetProperty="Color">
                                            <LinearColorKeyFrame Value="#F0F0F0" KeyTime="00:00:00.0020000" />
                                            <LinearColorKeyFrame Value="Transparent" KeyTime="00:00:00.0320000" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IconAnimatedBrushBackground" Storyboard.TargetProperty="Color">
                                            <LinearColorKeyFrame Value="#F0F0F0" KeyTime="00:00:00.0020000" />
                                            <LinearColorKeyFrame Value="Transparent" KeyTime="00:00:00.0320000" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                        </Trigger>
                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>
                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>
                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnReadBurnAfterStyle" TargetType="{x:Type Button}">
        <!--<Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>-->
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapReadBurn}" Stretch="None"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapReadBurn_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapReadBurn_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnIncognitoModeStyle" TargetType="{x:Type Button}">
        <!--<Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>-->
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapIncognitoMode}" Stretch="None"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapIncognitoMode_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapIncognitoMode_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnBurnExitStyle" TargetType="{x:Type Button}">
        <!--<Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>-->
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapExitIncognitoMode}" Stretch="None"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapExitIncognitoMode_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapExitIncognitoMode_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnDeleteStyle" TargetType="{x:Type Button}">
        <!--<Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>-->
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapDelIncognitoModeMsg}" Stretch="None"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapDelIncognitoModeMsg_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapDelIncognitoModeMsg_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnSendFileStyle" TargetType="{x:Type Button}">
        <!--<Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>-->
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapSelectFile}" Stretch="None"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapSelectFile_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapSelectFile_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnSendSoundStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapSound}" Stretch="None"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapSound_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapSound}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnAudioStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapAudio}" Stretch="None"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapAudio_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapAudio}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BtnHangupStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapHangup}" Stretch="None"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapHangup_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapHangup}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnSendImagesStyle" TargetType="{x:Type Button}">
        <!--<Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>-->
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent" Margin="0,0,0,0">
                        <Image Name="ImgBtnBg3" Source="{StaticResource BitmapSelectImg}" Stretch="None"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapSelectImg_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{StaticResource BitmapSelectImg_IsMouseEnter}" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnHistoryMsgStyle" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,0,20,0"></Setter>
        <!--<Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>-->
        <Setter Property="HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent">
                        <Image Name="ImgBtnBg3" Width="20" Height="20" Source="pack://application:,,,/AntennaChat;Component/Images/历史记录-1.png" Stretch="Fill"/>
                        <TextBlock x:Name="historyText" Text="历史记录" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="10" Foreground="#333333"></TextBlock>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/历史记录-2.png" TargetName="ImgBtnBg3"/>
                            <Setter Property="Width" Value="88" TargetName="ImgBtnBg3"></Setter>
                            <Setter Property="Height" Value="28" TargetName="ImgBtnBg3"></Setter>
                            <Setter Property="Margin" Value="0,0,-64,0" TargetName="ImgBtnBg3"></Setter>
                            <Setter Property="Foreground" Value="#22aeff" TargetName="historyText"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/历史记录-2.png" TargetName="ImgBtnBg3"/>
                            <Setter Property="Width" Value="88" TargetName="ImgBtnBg3"></Setter>
                            <Setter Property="Height" Value="28" TargetName="ImgBtnBg3"></Setter>
                            <Setter Property="Margin" Value="0,0,-64,0" TargetName="ImgBtnBg3"></Setter>
                            <Setter Property="Foreground" Value="#22aeff" TargetName="historyText"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnSendMsgStyle" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,0,0,0"></Setter>
        <!--<Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>-->
        <Setter Property="HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent">
                        <Image Name="ImgBtnBg1" Width="60" Height="32" Source="pack://application:,,,/AntennaChat;Component/Images/发送-1.png" Stretch="Fill"/>
                        <TextBlock x:Name="sendText1" Text="发送" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="-60,0,0,0" Foreground="White"></TextBlock>
                        <!--<Image Name="ImgBtnBg2" Width="28" Height="32" Source="pack://application:,,,/AntennaChat;Component/Images/发送-2.png" Stretch="Fill"/>-->
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送-1-02.png" TargetName="ImgBtnBg1"/>
                            <!--<Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送-2-02.png" TargetName="ImgBtnBg2"/>-->
                            <!--<Setter Property="Foreground" Value="#22aeff" TargetName="sendText1"/>-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送-1-02.png" TargetName="ImgBtnBg1"/>
                            <!--<Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送-2-02.png" TargetName="ImgBtnBg2"/>-->
                            <!--<Setter Property="Foreground" Value="#22aeff" TargetName="historyText"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BtnTalkSendMsgStyle" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="BorderThickness" Value="1,1,0,1"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="#333333"/>
        <Setter Property="BorderBrush" Value="#e0e0e0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="2,0,2,0">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="#1991ed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="BtnSendMsgSettingStyle" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="BorderThickness" Value="0,1,1,1"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="#333333"/>
        <Setter Property="BorderBrush" Value="#e0e0e0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="2,0,2,0">
                        <Grid>
                            <Path x:Name="path" Data="M5.8980706,13.542352 L5.91944,9.2570016 5.91944,5.0607715 14.98006,7.7725167 19.931856,9.2545357 15.319199,10.591652 z" Height="8"  Stretch="Fill" VerticalAlignment="Stretch" Fill="#FFBBBBBB" HorizontalAlignment="Stretch" Width="6" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="90"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="path" Property="Fill" Value="#1991ed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnSendMsgSettingStyle" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,0,20,0"></Setter>
        <!--<Setter Property="Width" Value="24"></Setter>
        <Setter Property="Height" Value="24"></Setter>-->
        <Setter Property="HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent">
                        <!--<Image Name="ImgBtnBg1" Width="60" Height="32" Source="pack://application:,,,/AntennaChat;Component/Images/发送-1.png" Stretch="Fill"/>-->
                        <!--<TextBlock x:Name="sendText1" Text="发送" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="-60,0,0,0" Foreground="White"></TextBlock>-->
                        <Image Name="ImgBtnBg2" Width="28" Height="32" Source="pack://application:,,,/AntennaChat;Component/Images/发送-2.png" Stretch="Fill"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送-1-02.png" TargetName="ImgBtnBg1"/>-->
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送-2-02.png" TargetName="ImgBtnBg2"/>
                            <!--<Setter Property="Foreground" Value="#22aeff" TargetName="sendText1"/>-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <!--<Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送-1-02.png" TargetName="ImgBtnBg1"/>-->
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送-2-02.png" TargetName="ImgBtnBg2"/>
                            <!--<Setter Property="Foreground" Value="#22aeff" TargetName="historyText"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--btnClose-->
    <Style x:Key="btnFileClose" TargetType="{x:Type Button}">
        <Setter Property="ToolTip" Value="移除"></Setter>
        <Setter Property="Margin" Value="0,-6,-30,-20"></Setter>
        <Setter Property="Panel.ZIndex" Value="1"></Setter>
        <Setter Property="Width" Value="16"></Setter>
        <Setter Property="Height" Value="16"></Setter>
        <!--<Setter Property="HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent">
                        <Image Name="ImgBtnBg3" Source="pack://application:,,,/AntennaChat;Component/Images/人员删除-1.png" Stretch="Fill"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/人员删除-2.png" TargetName="ImgBtnBg3"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/人员删除-2.png" TargetName="ImgBtnBg3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnOkUploadFileStyle" TargetType="{x:Type Button}">
        <Setter Property="ToolTip" Value="确定上传"></Setter>
        <Setter Property="Margin" Value="40,14,20,8"></Setter>
        <Setter Property="Width" Value="66"></Setter>
        <Setter Property="Height" Value="28"></Setter>
        <!--<Setter Property="HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent">
                        <Image Name="ImgBtnBg1" Width="66" Height="28" Source="pack://application:,,,/AntennaChat;Component/Images/发送按钮.png" Stretch="Fill"/>
                        <TextBlock x:Name="sendText1" Text="发送" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="-60,0,0,0" Foreground="White"></TextBlock>
                        <!--<Image Name="ImgBtnBg2" Width="28" Height="32" Source="pack://application:,,,/AntennaChat;Component/Images/发送-2.png" Stretch="Fill"/>-->
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送按钮-2.png" TargetName="ImgBtnBg1"/>
                            <!--<Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送-2-02.png" TargetName="ImgBtnBg2"/>-->
                            <!--<Setter Property="Foreground" Value="#22aeff" TargetName="sendText1"/>-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送按钮-2.png" TargetName="ImgBtnBg1"/>
                            <!--<Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送-2-02.png" TargetName="ImgBtnBg2"/>-->
                            <!--<Setter Property="Foreground" Value="#22aeff" TargetName="historyText"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnCanelUploadFileStyle" TargetType="{x:Type Button}">
        <Setter Property="ToolTip" Value="取消上传"></Setter>
        <Setter Property="Margin" Value="40,0,20,0"></Setter>
        <Setter Property="Width" Value="66"></Setter>
        <Setter Property="Height" Value="28"></Setter>
        <!--<Setter Property="HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="Transparent">
                        <Image Name="ImgBtnBg1" Width="66" Height="28" Source="pack://application:,,,/AntennaChat;Component/Images/取消按钮.png" Stretch="Fill"/>
                        <TextBlock x:Name="sendText1" Text="取消" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="-60,0,0,0" Foreground="White"></TextBlock>
                        <!--<Image Name="ImgBtnBg2" Width="28" Height="32" Source="pack://application:,,,/AntennaChat;Component/Images/发送-2.png" Stretch="Fill"/>-->
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/取消按钮-2.png" TargetName="ImgBtnBg1"/>
                            <!--<Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送-2-02.png" TargetName="ImgBtnBg2"/>-->
                            <!--<Setter Property="Foreground" Value="#22aeff" TargetName="sendText1"/>-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/取消按钮-2.png" TargetName="ImgBtnBg1"/>
                            <!--<Setter Property="Source" Value="pack://application:,,,/AntennaChat;Component/Images/发送-2-02.png" TargetName="ImgBtnBg2"/>-->
                            <!--<Setter Property="Foreground" Value="#22aeff" TargetName="historyText"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--录音进度条-->
    <Style x:Key="SimpleProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid>
                        <!-- This Border is the track. It must be named PART_Track -->
                        <Border x:Name="PART_Track" Background="#F0F0F0" BorderThickness="0"/>
                        <!-- This Border shows progress. It must be named PART_Indicator for the control to function -->
                        <Border HorizontalAlignment="Left" x:Name="PART_Indicator" Background="#D2EBFF" BorderThickness="0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--透明背景按钮样式-->
    <Style TargetType="{x:Type Button}" x:Key="SoundButtonStyle">
        <Setter Property="Background" Value="#FFFFFF"/>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" CornerRadius="2"  Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#F0F0F0"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#FFFFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>